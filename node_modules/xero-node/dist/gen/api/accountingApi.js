"use strict";
/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.36.0
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountingApi = exports.AccountingApiApiKeys = void 0;
const localVarRequest = require("request");
const models_1 = require("../model/accounting/models");
const models_2 = require("../model/accounting/models");
let defaultBasePath = 'https://api.xero.com/api.xro/2.0';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var AccountingApiApiKeys;
(function (AccountingApiApiKeys) {
})(AccountingApiApiKeys = exports.AccountingApiApiKeys || (exports.AccountingApiApiKeys = {}));
class AccountingApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = { 'user-agent': 'xero-node-4.33.0' };
        this._useQuerystring = false;
        this.binaryHeaders = {};
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'OAuth2': new models_2.OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[AccountingApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.OAuth2.accessToken = token;
    }
    /**
     *
     * @summary Creates a new chart of accounts
     * @param xeroTenantId Xero identifier for Tenant
     * @param account Account object in body of request
     */
    createAccount(xeroTenantId, account, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createAccount.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new Error('Required parameter account was null or undefined when calling createAccount.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(account, "Account")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Accounts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates an attachment on a specific account
     * @param xeroTenantId Xero identifier for Tenant
     * @param accountID Unique identifier for Account object
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createAccountAttachmentByFileName(xeroTenantId, accountID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts/{AccountID}/Attachments/{FileName}'
                .replace('{' + 'AccountID' + '}', encodeURIComponent(String(accountID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createAccountAttachmentByFileName.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new Error('Required parameter accountID was null or undefined when calling createAccountAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createAccountAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createAccountAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates an attachment for a specific bank transaction by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}/Attachments/{FileName}'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling createBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createBankTransactionAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific bank transactions
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createBankTransactionHistoryRecord(xeroTenantId, bankTransactionID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}/History'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBankTransactionHistoryRecord.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling createBankTransactionHistoryRecord.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createBankTransactionHistoryRecord.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates one or more spent or received money transaction
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactions BankTransactions with an array of BankTransaction objects in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    createBankTransactions(xeroTenantId, bankTransactions, summarizeErrors, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBankTransactions.');
            }
            // verify required parameter 'bankTransactions' is not null or undefined
            if (bankTransactions === null || bankTransactions === undefined) {
                throw new Error('Required parameter bankTransactions was null or undefined when calling createBankTransactions.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(bankTransactions, "BankTransactions")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BankTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a bank transfer
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransfers BankTransfers with array of BankTransfer objects in request body
     */
    createBankTransfer(xeroTenantId, bankTransfers, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBankTransfer.');
            }
            // verify required parameter 'bankTransfers' is not null or undefined
            if (bankTransfers === null || bankTransfers === undefined) {
                throw new Error('Required parameter bankTransfers was null or undefined when calling createBankTransfer.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(bankTransfers, "BankTransfers")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BankTransfers");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransferID Xero generated unique identifier for a bank transfer
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers/{BankTransferID}/Attachments/{FileName}'
                .replace('{' + 'BankTransferID' + '}', encodeURIComponent(String(bankTransferID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'bankTransferID' is not null or undefined
            if (bankTransferID === null || bankTransferID === undefined) {
                throw new Error('Required parameter bankTransferID was null or undefined when calling createBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createBankTransferAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific bank transfer
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransferID Xero generated unique identifier for a bank transfer
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createBankTransferHistoryRecord(xeroTenantId, bankTransferID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers/{BankTransferID}/History'
                .replace('{' + 'BankTransferID' + '}', encodeURIComponent(String(bankTransferID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBankTransferHistoryRecord.');
            }
            // verify required parameter 'bankTransferID' is not null or undefined
            if (bankTransferID === null || bankTransferID === undefined) {
                throw new Error('Required parameter bankTransferID was null or undefined when calling createBankTransferHistoryRecord.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createBankTransferHistoryRecord.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates one or many batch payments for invoices
     * @param xeroTenantId Xero identifier for Tenant
     * @param batchPayments BatchPayments with an array of Payments in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createBatchPayment(xeroTenantId, batchPayments, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BatchPayments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBatchPayment.');
            }
            // verify required parameter 'batchPayments' is not null or undefined
            if (batchPayments === null || batchPayments === undefined) {
                throw new Error('Required parameter batchPayments was null or undefined when calling createBatchPayment.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(batchPayments, "BatchPayments")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BatchPayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific batch payment
     * @param xeroTenantId Xero identifier for Tenant
     * @param batchPaymentID Unique identifier for BatchPayment
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createBatchPaymentHistoryRecord(xeroTenantId, batchPaymentID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BatchPayments/{BatchPaymentID}/History'
                .replace('{' + 'BatchPaymentID' + '}', encodeURIComponent(String(batchPaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBatchPaymentHistoryRecord.');
            }
            // verify required parameter 'batchPaymentID' is not null or undefined
            if (batchPaymentID === null || batchPaymentID === undefined) {
                throw new Error('Required parameter batchPaymentID was null or undefined when calling createBatchPaymentHistoryRecord.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createBatchPaymentHistoryRecord.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a new custom payment service for a specific branding theme
     * @param xeroTenantId Xero identifier for Tenant
     * @param brandingThemeID Unique identifier for a Branding Theme
     * @param paymentServices PaymentServices array with PaymentService object in body of request
     */
    createBrandingThemePaymentServices(xeroTenantId, brandingThemeID, paymentServices, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BrandingThemes/{BrandingThemeID}/PaymentServices'
                .replace('{' + 'BrandingThemeID' + '}', encodeURIComponent(String(brandingThemeID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createBrandingThemePaymentServices.');
            }
            // verify required parameter 'brandingThemeID' is not null or undefined
            if (brandingThemeID === null || brandingThemeID === undefined) {
                throw new Error('Required parameter brandingThemeID was null or undefined when calling createBrandingThemePaymentServices.');
            }
            // verify required parameter 'paymentServices' is not null or undefined
            if (paymentServices === null || paymentServices === undefined) {
                throw new Error('Required parameter paymentServices was null or undefined when calling createBrandingThemePaymentServices.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(paymentServices, "PaymentServices")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PaymentServices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createContactAttachmentByFileName(xeroTenantId, contactID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}/Attachments/{FileName}'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createContactAttachmentByFileName.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling createContactAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createContactAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createContactAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a contact group
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactGroups ContactGroups with an array of names in request body
     */
    createContactGroup(xeroTenantId, contactGroups, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ContactGroups';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createContactGroup.');
            }
            // verify required parameter 'contactGroups' is not null or undefined
            if (contactGroups === null || contactGroups === undefined) {
                throw new Error('Required parameter contactGroups was null or undefined when calling createContactGroup.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(contactGroups, "ContactGroups")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ContactGroups");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates contacts to a specific contact group
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactGroupID Unique identifier for a Contact Group
     * @param contacts Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request
     */
    createContactGroupContacts(xeroTenantId, contactGroupID, contacts, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ContactGroups/{ContactGroupID}/Contacts'
                .replace('{' + 'ContactGroupID' + '}', encodeURIComponent(String(contactGroupID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createContactGroupContacts.');
            }
            // verify required parameter 'contactGroupID' is not null or undefined
            if (contactGroupID === null || contactGroupID === undefined) {
                throw new Error('Required parameter contactGroupID was null or undefined when calling createContactGroupContacts.');
            }
            // verify required parameter 'contacts' is not null or undefined
            if (contacts === null || contacts === undefined) {
                throw new Error('Required parameter contacts was null or undefined when calling createContactGroupContacts.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(contacts, "Contacts")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Contacts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a new history record for a specific contact
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createContactHistory(xeroTenantId, contactID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}/History'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createContactHistory.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling createContactHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createContactHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates multiple contacts (bulk) in a Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param contacts Contacts with an array of Contact objects to create in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createContacts(xeroTenantId, contacts, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createContacts.');
            }
            // verify required parameter 'contacts' is not null or undefined
            if (contacts === null || contacts === undefined) {
                throw new Error('Required parameter contacts was null or undefined when calling createContacts.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(contacts, "Contacts")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Contacts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates allocation for a specific credit note
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     * @param allocations Allocations with array of Allocation object in body of request.
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createCreditNoteAllocation(xeroTenantId, creditNoteID, allocations, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}/Allocations'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createCreditNoteAllocation.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling createCreditNoteAllocation.');
            }
            // verify required parameter 'allocations' is not null or undefined
            if (allocations === null || allocations === undefined) {
                throw new Error('Required parameter allocations was null or undefined when calling createCreditNoteAllocation.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(allocations, "Allocations")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Allocations");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates an attachment for a specific credit note
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice
     */
    createCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, body, includeOnline, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}/Attachments/{FileName}'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling createCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createCreditNoteAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            if (includeOnline !== undefined) {
                localVarQueryParameters['IncludeOnline'] = models_1.ObjectSerializer.serialize(includeOnline, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history records of a specific credit note
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createCreditNoteHistory(xeroTenantId, creditNoteID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}/History'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createCreditNoteHistory.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling createCreditNoteHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createCreditNoteHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a new credit note
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNotes Credit Notes with array of CreditNote object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    createCreditNotes(xeroTenantId, creditNotes, summarizeErrors, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createCreditNotes.');
            }
            // verify required parameter 'creditNotes' is not null or undefined
            if (creditNotes === null || creditNotes === undefined) {
                throw new Error('Required parameter creditNotes was null or undefined when calling createCreditNotes.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(creditNotes, "CreditNotes")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "CreditNotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Create a new currency for a Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param currency Currency object in the body of request
     */
    createCurrency(xeroTenantId, currency, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Currencies';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createCurrency.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new Error('Required parameter currency was null or undefined when calling createCurrency.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(currency, "Currency")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Currencies");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates new employees used in Xero payrun
     * @param xeroTenantId Xero identifier for Tenant
     * @param employees Employees with array of Employee object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createEmployees(xeroTenantId, employees, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Employees';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createEmployees.');
            }
            // verify required parameter 'employees' is not null or undefined
            if (employees === null || employees === undefined) {
                throw new Error('Required parameter employees was null or undefined when calling createEmployees.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(employees, "Employees")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Employees");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific expense claim
     * @param xeroTenantId Xero identifier for Tenant
     * @param expenseClaimID Unique identifier for a ExpenseClaim
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createExpenseClaimHistory(xeroTenantId, expenseClaimID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ExpenseClaims/{ExpenseClaimID}/History'
                .replace('{' + 'ExpenseClaimID' + '}', encodeURIComponent(String(expenseClaimID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createExpenseClaimHistory.');
            }
            // verify required parameter 'expenseClaimID' is not null or undefined
            if (expenseClaimID === null || expenseClaimID === undefined) {
                throw new Error('Required parameter expenseClaimID was null or undefined when calling createExpenseClaimHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createExpenseClaimHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates expense claims
     * @param xeroTenantId Xero identifier for Tenant
     * @param expenseClaims ExpenseClaims with array of ExpenseClaim object in body of request
     */
    createExpenseClaims(xeroTenantId, expenseClaims, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ExpenseClaims';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createExpenseClaims.');
            }
            // verify required parameter 'expenseClaims' is not null or undefined
            if (expenseClaims === null || expenseClaims === undefined) {
                throw new Error('Required parameter expenseClaims was null or undefined when calling createExpenseClaims.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(expenseClaims, "ExpenseClaims")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ExpenseClaims");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates an attachment for a specific invoice or purchase bill by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice
     */
    createInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, body, includeOnline, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/Attachments/{FileName}'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling createInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createInvoiceAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            if (includeOnline !== undefined) {
                localVarQueryParameters['IncludeOnline'] = models_1.ObjectSerializer.serialize(includeOnline, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific invoice
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createInvoiceHistory(xeroTenantId, invoiceID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/History'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createInvoiceHistory.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling createInvoiceHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createInvoiceHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates one or more sales invoices or purchase bills
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoices Invoices with an array of invoice objects in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    createInvoices(xeroTenantId, invoices, summarizeErrors, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createInvoices.');
            }
            // verify required parameter 'invoices' is not null or undefined
            if (invoices === null || invoices === undefined) {
                throw new Error('Required parameter invoices was null or undefined when calling createInvoices.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(invoices, "Invoices")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Invoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific item
     * @param xeroTenantId Xero identifier for Tenant
     * @param itemID Unique identifier for an Item
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createItemHistory(xeroTenantId, itemID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Items/{ItemID}/History'
                .replace('{' + 'ItemID' + '}', encodeURIComponent(String(itemID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createItemHistory.');
            }
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new Error('Required parameter itemID was null or undefined when calling createItemHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createItemHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates one or more items
     * @param xeroTenantId Xero identifier for Tenant
     * @param items Items with an array of Item objects in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    createItems(xeroTenantId, items, summarizeErrors, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Items';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createItems.');
            }
            // verify required parameter 'items' is not null or undefined
            if (items === null || items === undefined) {
                throw new Error('Required parameter items was null or undefined when calling createItems.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(items, "Items")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Items");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates linked transactions (billable expenses)
     * @param xeroTenantId Xero identifier for Tenant
     * @param linkedTransaction LinkedTransaction object in body of request
     */
    createLinkedTransaction(xeroTenantId, linkedTransaction, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LinkedTransactions';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createLinkedTransaction.');
            }
            // verify required parameter 'linkedTransaction' is not null or undefined
            if (linkedTransaction === null || linkedTransaction === undefined) {
                throw new Error('Required parameter linkedTransaction was null or undefined when calling createLinkedTransaction.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(linkedTransaction, "LinkedTransaction")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "LinkedTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a specific attachment for a specific manual journal by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}/Attachments/{FileName}'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling createManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createManualJournalAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific manual journal
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createManualJournalHistoryRecord(xeroTenantId, manualJournalID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}/History'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createManualJournalHistoryRecord.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling createManualJournalHistoryRecord.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createManualJournalHistoryRecord.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates one or more manual journals
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournals ManualJournals array with ManualJournal object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createManualJournals(xeroTenantId, manualJournals, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createManualJournals.');
            }
            // verify required parameter 'manualJournals' is not null or undefined
            if (manualJournals === null || manualJournals === undefined) {
                throw new Error('Required parameter manualJournals was null or undefined when calling createManualJournals.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(manualJournals, "ManualJournals")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ManualJournals");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a single allocation for a specific overpayment
     * @param xeroTenantId Xero identifier for Tenant
     * @param overpaymentID Unique identifier for a Overpayment
     * @param allocations Allocations array with Allocation object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createOverpaymentAllocations(xeroTenantId, overpaymentID, allocations, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Overpayments/{OverpaymentID}/Allocations'
                .replace('{' + 'OverpaymentID' + '}', encodeURIComponent(String(overpaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createOverpaymentAllocations.');
            }
            // verify required parameter 'overpaymentID' is not null or undefined
            if (overpaymentID === null || overpaymentID === undefined) {
                throw new Error('Required parameter overpaymentID was null or undefined when calling createOverpaymentAllocations.');
            }
            // verify required parameter 'allocations' is not null or undefined
            if (allocations === null || allocations === undefined) {
                throw new Error('Required parameter allocations was null or undefined when calling createOverpaymentAllocations.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(allocations, "Allocations")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Allocations");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific overpayment
     * @param xeroTenantId Xero identifier for Tenant
     * @param overpaymentID Unique identifier for a Overpayment
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createOverpaymentHistory(xeroTenantId, overpaymentID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Overpayments/{OverpaymentID}/History'
                .replace('{' + 'OverpaymentID' + '}', encodeURIComponent(String(overpaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createOverpaymentHistory.');
            }
            // verify required parameter 'overpaymentID' is not null or undefined
            if (overpaymentID === null || overpaymentID === undefined) {
                throw new Error('Required parameter overpaymentID was null or undefined when calling createOverpaymentHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createOverpaymentHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a single payment for invoice or credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param payment Request body with a single Payment object
     */
    createPayment(xeroTenantId, payment, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPayment.');
            }
            // verify required parameter 'payment' is not null or undefined
            if (payment === null || payment === undefined) {
                throw new Error('Required parameter payment was null or undefined when calling createPayment.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(payment, "Payment")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Payments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific payment
     * @param xeroTenantId Xero identifier for Tenant
     * @param paymentID Unique identifier for a Payment
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createPaymentHistory(xeroTenantId, paymentID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payments/{PaymentID}/History'
                .replace('{' + 'PaymentID' + '}', encodeURIComponent(String(paymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPaymentHistory.');
            }
            // verify required parameter 'paymentID' is not null or undefined
            if (paymentID === null || paymentID === undefined) {
                throw new Error('Required parameter paymentID was null or undefined when calling createPaymentHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createPaymentHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a payment service
     * @param xeroTenantId Xero identifier for Tenant
     * @param paymentServices PaymentServices array with PaymentService object in body of request
     */
    createPaymentService(xeroTenantId, paymentServices, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PaymentServices';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPaymentService.');
            }
            // verify required parameter 'paymentServices' is not null or undefined
            if (paymentServices === null || paymentServices === undefined) {
                throw new Error('Required parameter paymentServices was null or undefined when calling createPaymentService.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(paymentServices, "PaymentServices")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PaymentServices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates multiple payments for invoices or credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param payments Payments array with Payment object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createPayments(xeroTenantId, payments, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPayments.');
            }
            // verify required parameter 'payments' is not null or undefined
            if (payments === null || payments === undefined) {
                throw new Error('Required parameter payments was null or undefined when calling createPayments.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(payments, "Payments")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Payments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Allows you to create an Allocation for prepayments
     * @param xeroTenantId Xero identifier for Tenant
     * @param prepaymentID Unique identifier for a PrePayment
     * @param allocations Allocations with an array of Allocation object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createPrepaymentAllocations(xeroTenantId, prepaymentID, allocations, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Prepayments/{PrepaymentID}/Allocations'
                .replace('{' + 'PrepaymentID' + '}', encodeURIComponent(String(prepaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPrepaymentAllocations.');
            }
            // verify required parameter 'prepaymentID' is not null or undefined
            if (prepaymentID === null || prepaymentID === undefined) {
                throw new Error('Required parameter prepaymentID was null or undefined when calling createPrepaymentAllocations.');
            }
            // verify required parameter 'allocations' is not null or undefined
            if (allocations === null || allocations === undefined) {
                throw new Error('Required parameter allocations was null or undefined when calling createPrepaymentAllocations.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(allocations, "Allocations")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Allocations");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific prepayment
     * @param xeroTenantId Xero identifier for Tenant
     * @param prepaymentID Unique identifier for a PrePayment
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createPrepaymentHistory(xeroTenantId, prepaymentID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Prepayments/{PrepaymentID}/History'
                .replace('{' + 'PrepaymentID' + '}', encodeURIComponent(String(prepaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPrepaymentHistory.');
            }
            // verify required parameter 'prepaymentID' is not null or undefined
            if (prepaymentID === null || prepaymentID === undefined) {
                throw new Error('Required parameter prepaymentID was null or undefined when calling createPrepaymentHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createPrepaymentHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates attachment for a specific purchase order
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createPurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling createPurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createPurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createPurchaseOrderAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific purchase orders
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createPurchaseOrderHistory(xeroTenantId, purchaseOrderID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}/History'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPurchaseOrderHistory.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling createPurchaseOrderHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createPurchaseOrderHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates one or more purchase orders
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrders PurchaseOrders with an array of PurchaseOrder object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createPurchaseOrders(xeroTenantId, purchaseOrders, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPurchaseOrders.');
            }
            // verify required parameter 'purchaseOrders' is not null or undefined
            if (purchaseOrders === null || purchaseOrders === undefined) {
                throw new Error('Required parameter purchaseOrders was null or undefined when calling createPurchaseOrders.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(purchaseOrders, "PurchaseOrders")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PurchaseOrders");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates attachment for a specific quote
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}/Attachments/{FileName}'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createQuoteAttachmentByFileName.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling createQuoteAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createQuoteAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createQuoteAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific quote
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createQuoteHistory(xeroTenantId, quoteID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}/History'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createQuoteHistory.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling createQuoteHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createQuoteHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Create one or more quotes
     * @param xeroTenantId Xero identifier for Tenant
     * @param quotes Quotes with an array of Quote object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createQuotes(xeroTenantId, quotes, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createQuotes.');
            }
            // verify required parameter 'quotes' is not null or undefined
            if (quotes === null || quotes === undefined) {
                throw new Error('Required parameter quotes was null or undefined when calling createQuotes.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(quotes, "Quotes")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Quotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates draft expense claim receipts for any user
     * @param xeroTenantId Xero identifier for Tenant
     * @param receipts Receipts with an array of Receipt object in body of request
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    createReceipt(xeroTenantId, receipts, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createReceipt.');
            }
            // verify required parameter 'receipts' is not null or undefined
            if (receipts === null || receipts === undefined) {
                throw new Error('Required parameter receipts was null or undefined when calling createReceipt.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(receipts, "Receipts")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Receipts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates an attachment on a specific expense claim receipts by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}/Attachments/{FileName}'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createReceiptAttachmentByFileName.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling createReceiptAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createReceiptAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createReceiptAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a history record for a specific receipt
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createReceiptHistory(xeroTenantId, receiptID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}/History'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createReceiptHistory.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling createReceiptHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createReceiptHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates an attachment from a specific repeating invoices by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    createRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling createRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling createRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createRepeatingInvoiceAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a  history record for a specific repeating invoice
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     */
    createRepeatingInvoiceHistory(xeroTenantId, repeatingInvoiceID, historyRecords, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}/History'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createRepeatingInvoiceHistory.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling createRepeatingInvoiceHistory.');
            }
            // verify required parameter 'historyRecords' is not null or undefined
            if (historyRecords === null || historyRecords === undefined) {
                throw new Error('Required parameter historyRecords was null or undefined when calling createRepeatingInvoiceHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(historyRecords, "HistoryRecords")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates one or more repeating invoice templates
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoices RepeatingInvoices with an array of repeating invoice objects in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    createRepeatingInvoices(xeroTenantId, repeatingInvoices, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createRepeatingInvoices.');
            }
            // verify required parameter 'repeatingInvoices' is not null or undefined
            if (repeatingInvoices === null || repeatingInvoices === undefined) {
                throw new Error('Required parameter repeatingInvoices was null or undefined when calling createRepeatingInvoices.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(repeatingInvoices, "RepeatingInvoices")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "RepeatingInvoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates one or more tax rates
     * @param xeroTenantId Xero identifier for Tenant
     * @param taxRates TaxRates array with TaxRate object in body of request
     */
    createTaxRates(xeroTenantId, taxRates, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TaxRates';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createTaxRates.');
            }
            // verify required parameter 'taxRates' is not null or undefined
            if (taxRates === null || taxRates === undefined) {
                throw new Error('Required parameter taxRates was null or undefined when calling createTaxRates.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(taxRates, "TaxRates")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TaxRates");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Create tracking categories
     * @param xeroTenantId Xero identifier for Tenant
     * @param trackingCategory TrackingCategory object in body of request
     */
    createTrackingCategory(xeroTenantId, trackingCategory, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TrackingCategories';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createTrackingCategory.');
            }
            // verify required parameter 'trackingCategory' is not null or undefined
            if (trackingCategory === null || trackingCategory === undefined) {
                throw new Error('Required parameter trackingCategory was null or undefined when calling createTrackingCategory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(trackingCategory, "TrackingCategory")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TrackingCategories");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates options for a specific tracking category
     * @param xeroTenantId Xero identifier for Tenant
     * @param trackingCategoryID Unique identifier for a TrackingCategory
     * @param trackingOption TrackingOption object in body of request
     */
    createTrackingOptions(xeroTenantId, trackingCategoryID, trackingOption, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TrackingCategories/{TrackingCategoryID}/Options'
                .replace('{' + 'TrackingCategoryID' + '}', encodeURIComponent(String(trackingCategoryID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createTrackingOptions.');
            }
            // verify required parameter 'trackingCategoryID' is not null or undefined
            if (trackingCategoryID === null || trackingCategoryID === undefined) {
                throw new Error('Required parameter trackingCategoryID was null or undefined when calling createTrackingOptions.');
            }
            // verify required parameter 'trackingOption' is not null or undefined
            if (trackingOption === null || trackingOption === undefined) {
                throw new Error('Required parameter trackingOption was null or undefined when calling createTrackingOptions.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(trackingOption, "TrackingOption")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TrackingOptions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Deletes a chart of accounts
     * @param xeroTenantId Xero identifier for Tenant
     * @param accountID Unique identifier for Account object
     */
    deleteAccount(xeroTenantId, accountID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts/{AccountID}'
                .replace('{' + 'AccountID' + '}', encodeURIComponent(String(accountID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteAccount.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new Error('Required parameter accountID was null or undefined when calling deleteAccount.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Accounts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific batch payment for invoices and credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param batchPaymentDelete
     */
    deleteBatchPayment(xeroTenantId, batchPaymentDelete, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BatchPayments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteBatchPayment.');
            }
            // verify required parameter 'batchPaymentDelete' is not null or undefined
            if (batchPaymentDelete === null || batchPaymentDelete === undefined) {
                throw new Error('Required parameter batchPaymentDelete was null or undefined when calling deleteBatchPayment.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(batchPaymentDelete, "BatchPaymentDelete")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BatchPayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific batch payment for invoices and credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param batchPaymentID Unique identifier for BatchPayment
     * @param batchPaymentDeleteByUrlParam
     */
    deleteBatchPaymentByUrlParam(xeroTenantId, batchPaymentID, batchPaymentDeleteByUrlParam, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BatchPayments/{BatchPaymentID}'
                .replace('{' + 'BatchPaymentID' + '}', encodeURIComponent(String(batchPaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteBatchPaymentByUrlParam.');
            }
            // verify required parameter 'batchPaymentID' is not null or undefined
            if (batchPaymentID === null || batchPaymentID === undefined) {
                throw new Error('Required parameter batchPaymentID was null or undefined when calling deleteBatchPaymentByUrlParam.');
            }
            // verify required parameter 'batchPaymentDeleteByUrlParam' is not null or undefined
            if (batchPaymentDeleteByUrlParam === null || batchPaymentDeleteByUrlParam === undefined) {
                throw new Error('Required parameter batchPaymentDeleteByUrlParam was null or undefined when calling deleteBatchPaymentByUrlParam.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(batchPaymentDeleteByUrlParam, "BatchPaymentDeleteByUrlParam")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BatchPayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Deletes a specific contact from a contact group using a unique contact Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactGroupID Unique identifier for a Contact Group
     * @param contactID Unique identifier for a Contact
     */
    deleteContactGroupContact(xeroTenantId, contactGroupID, contactID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ContactGroups/{ContactGroupID}/Contacts/{ContactID}'
                .replace('{' + 'ContactGroupID' + '}', encodeURIComponent(String(contactGroupID)))
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteContactGroupContact.');
            }
            // verify required parameter 'contactGroupID' is not null or undefined
            if (contactGroupID === null || contactGroupID === undefined) {
                throw new Error('Required parameter contactGroupID was null or undefined when calling deleteContactGroupContact.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling deleteContactGroupContact.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Deletes all contacts from a specific contact group
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactGroupID Unique identifier for a Contact Group
     */
    deleteContactGroupContacts(xeroTenantId, contactGroupID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ContactGroups/{ContactGroupID}/Contacts'
                .replace('{' + 'ContactGroupID' + '}', encodeURIComponent(String(contactGroupID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteContactGroupContacts.');
            }
            // verify required parameter 'contactGroupID' is not null or undefined
            if (contactGroupID === null || contactGroupID === undefined) {
                throw new Error('Required parameter contactGroupID was null or undefined when calling deleteContactGroupContacts.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Deletes a specific item
     * @param xeroTenantId Xero identifier for Tenant
     * @param itemID Unique identifier for an Item
     */
    deleteItem(xeroTenantId, itemID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Items/{ItemID}'
                .replace('{' + 'ItemID' + '}', encodeURIComponent(String(itemID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteItem.');
            }
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new Error('Required parameter itemID was null or undefined when calling deleteItem.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Deletes a specific linked transactions (billable expenses)
     * @param xeroTenantId Xero identifier for Tenant
     * @param linkedTransactionID Unique identifier for a LinkedTransaction
     */
    deleteLinkedTransaction(xeroTenantId, linkedTransactionID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LinkedTransactions/{LinkedTransactionID}'
                .replace('{' + 'LinkedTransactionID' + '}', encodeURIComponent(String(linkedTransactionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteLinkedTransaction.');
            }
            // verify required parameter 'linkedTransactionID' is not null or undefined
            if (linkedTransactionID === null || linkedTransactionID === undefined) {
                throw new Error('Required parameter linkedTransactionID was null or undefined when calling deleteLinkedTransaction.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific payment for invoices and credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param paymentID Unique identifier for a Payment
     * @param paymentDelete
     */
    deletePayment(xeroTenantId, paymentID, paymentDelete, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payments/{PaymentID}'
                .replace('{' + 'PaymentID' + '}', encodeURIComponent(String(paymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deletePayment.');
            }
            // verify required parameter 'paymentID' is not null or undefined
            if (paymentID === null || paymentID === undefined) {
                throw new Error('Required parameter paymentID was null or undefined when calling deletePayment.');
            }
            // verify required parameter 'paymentDelete' is not null or undefined
            if (paymentDelete === null || paymentDelete === undefined) {
                throw new Error('Required parameter paymentDelete was null or undefined when calling deletePayment.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(paymentDelete, "PaymentDelete")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Payments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Deletes a specific tracking category
     * @param xeroTenantId Xero identifier for Tenant
     * @param trackingCategoryID Unique identifier for a TrackingCategory
     */
    deleteTrackingCategory(xeroTenantId, trackingCategoryID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TrackingCategories/{TrackingCategoryID}'
                .replace('{' + 'TrackingCategoryID' + '}', encodeURIComponent(String(trackingCategoryID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteTrackingCategory.');
            }
            // verify required parameter 'trackingCategoryID' is not null or undefined
            if (trackingCategoryID === null || trackingCategoryID === undefined) {
                throw new Error('Required parameter trackingCategoryID was null or undefined when calling deleteTrackingCategory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TrackingCategories");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Deletes a specific option for a specific tracking category
     * @param xeroTenantId Xero identifier for Tenant
     * @param trackingCategoryID Unique identifier for a TrackingCategory
     * @param trackingOptionID Unique identifier for a Tracking Option
     */
    deleteTrackingOptions(xeroTenantId, trackingCategoryID, trackingOptionID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}'
                .replace('{' + 'TrackingCategoryID' + '}', encodeURIComponent(String(trackingCategoryID)))
                .replace('{' + 'TrackingOptionID' + '}', encodeURIComponent(String(trackingOptionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling deleteTrackingOptions.');
            }
            // verify required parameter 'trackingCategoryID' is not null or undefined
            if (trackingCategoryID === null || trackingCategoryID === undefined) {
                throw new Error('Required parameter trackingCategoryID was null or undefined when calling deleteTrackingOptions.');
            }
            // verify required parameter 'trackingOptionID' is not null or undefined
            if (trackingOptionID === null || trackingOptionID === undefined) {
                throw new Error('Required parameter trackingOptionID was null or undefined when calling deleteTrackingOptions.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TrackingOptions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Sends a copy of a specific invoice to related contact via email
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     * @param requestEmpty
     */
    emailInvoice(xeroTenantId, invoiceID, requestEmpty, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/Email'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling emailInvoice.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling emailInvoice.');
            }
            // verify required parameter 'requestEmpty' is not null or undefined
            if (requestEmpty === null || requestEmpty === undefined) {
                throw new Error('Required parameter requestEmpty was null or undefined when calling emailInvoice.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(requestEmpty, "RequestEmpty")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a single chart of accounts by using a unique account Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param accountID Unique identifier for Account object
     */
    getAccount(xeroTenantId, accountID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts/{AccountID}'
                .replace('{' + 'AccountID' + '}', encodeURIComponent(String(accountID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getAccount.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new Error('Required parameter accountID was null or undefined when calling getAccount.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Accounts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves an attachment for a specific account by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param accountID Unique identifier for Account object
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getAccountAttachmentByFileName(xeroTenantId, accountID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts/{AccountID}/Attachments/{FileName}'
                .replace('{' + 'AccountID' + '}', encodeURIComponent(String(accountID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getAccountAttachmentByFileName.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new Error('Required parameter accountID was null or undefined when calling getAccountAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getAccountAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getAccountAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific account using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param accountID Unique identifier for Account object
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getAccountAttachmentById(xeroTenantId, accountID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts/{AccountID}/Attachments/{AttachmentID}'
                .replace('{' + 'AccountID' + '}', encodeURIComponent(String(accountID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getAccountAttachmentById.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new Error('Required parameter accountID was null or undefined when calling getAccountAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getAccountAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getAccountAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments for a specific accounts by using a unique account Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param accountID Unique identifier for Account object
     */
    getAccountAttachments(xeroTenantId, accountID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts/{AccountID}/Attachments'
                .replace('{' + 'AccountID' + '}', encodeURIComponent(String(accountID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getAccountAttachments.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new Error('Required parameter accountID was null or undefined when calling getAccountAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves the full chart of accounts
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getAccounts(xeroTenantId, ifModifiedSince, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getAccounts.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Accounts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a single spent or received money transaction by using a unique bank transaction Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getBankTransaction(xeroTenantId, bankTransactionID, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransaction.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling getBankTransaction.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BankTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific bank transaction by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}/Attachments/{FileName}'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling getBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getBankTransactionAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getBankTransactionAttachmentById(xeroTenantId, bankTransactionID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransactionAttachmentById.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling getBankTransactionAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getBankTransactionAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getBankTransactionAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves any attachments from a specific bank transactions
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     */
    getBankTransactionAttachments(xeroTenantId, bankTransactionID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}/Attachments'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransactionAttachments.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling getBankTransactionAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves any spent or received money transactions
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page Up to 100 bank transactions will be returned in a single API call with line items details
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getBankTransactions(xeroTenantId, ifModifiedSince, where, order, page, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransactions.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BankTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history from a specific bank transaction using a unique bank transaction Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     */
    getBankTransactionsHistory(xeroTenantId, bankTransactionID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}/History'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransactionsHistory.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling getBankTransactionsHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves specific bank transfers by using a unique bank transfer Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransferID Xero generated unique identifier for a bank transfer
     */
    getBankTransfer(xeroTenantId, bankTransferID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers/{BankTransferID}'
                .replace('{' + 'BankTransferID' + '}', encodeURIComponent(String(bankTransferID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransfer.');
            }
            // verify required parameter 'bankTransferID' is not null or undefined
            if (bankTransferID === null || bankTransferID === undefined) {
                throw new Error('Required parameter bankTransferID was null or undefined when calling getBankTransfer.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BankTransfers");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment on a specific bank transfer by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransferID Xero generated unique identifier for a bank transfer
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers/{BankTransferID}/Attachments/{FileName}'
                .replace('{' + 'BankTransferID' + '}', encodeURIComponent(String(bankTransferID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'bankTransferID' is not null or undefined
            if (bankTransferID === null || bankTransferID === undefined) {
                throw new Error('Required parameter bankTransferID was null or undefined when calling getBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getBankTransferAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransferID Xero generated unique identifier for a bank transfer
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getBankTransferAttachmentById(xeroTenantId, bankTransferID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers/{BankTransferID}/Attachments/{AttachmentID}'
                .replace('{' + 'BankTransferID' + '}', encodeURIComponent(String(bankTransferID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransferAttachmentById.');
            }
            // verify required parameter 'bankTransferID' is not null or undefined
            if (bankTransferID === null || bankTransferID === undefined) {
                throw new Error('Required parameter bankTransferID was null or undefined when calling getBankTransferAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getBankTransferAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getBankTransferAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments from a specific bank transfer
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransferID Xero generated unique identifier for a bank transfer
     */
    getBankTransferAttachments(xeroTenantId, bankTransferID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers/{BankTransferID}/Attachments'
                .replace('{' + 'BankTransferID' + '}', encodeURIComponent(String(bankTransferID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransferAttachments.');
            }
            // verify required parameter 'bankTransferID' is not null or undefined
            if (bankTransferID === null || bankTransferID === undefined) {
                throw new Error('Required parameter bankTransferID was null or undefined when calling getBankTransferAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history from a specific bank transfer using a unique bank transfer Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransferID Xero generated unique identifier for a bank transfer
     */
    getBankTransferHistory(xeroTenantId, bankTransferID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers/{BankTransferID}/History'
                .replace('{' + 'BankTransferID' + '}', encodeURIComponent(String(bankTransferID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransferHistory.');
            }
            // verify required parameter 'bankTransferID' is not null or undefined
            if (bankTransferID === null || bankTransferID === undefined) {
                throw new Error('Required parameter bankTransferID was null or undefined when calling getBankTransferHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves all bank transfers
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getBankTransfers(xeroTenantId, ifModifiedSince, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBankTransfers.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BankTransfers");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific batch payment using a unique batch payment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param batchPaymentID Unique identifier for BatchPayment
     */
    getBatchPayment(xeroTenantId, batchPaymentID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BatchPayments/{BatchPaymentID}'
                .replace('{' + 'BatchPaymentID' + '}', encodeURIComponent(String(batchPaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBatchPayment.');
            }
            // verify required parameter 'batchPaymentID' is not null or undefined
            if (batchPaymentID === null || batchPaymentID === undefined) {
                throw new Error('Required parameter batchPaymentID was null or undefined when calling getBatchPayment.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BatchPayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history from a specific batch payment
     * @param xeroTenantId Xero identifier for Tenant
     * @param batchPaymentID Unique identifier for BatchPayment
     */
    getBatchPaymentHistory(xeroTenantId, batchPaymentID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BatchPayments/{BatchPaymentID}/History'
                .replace('{' + 'BatchPaymentID' + '}', encodeURIComponent(String(batchPaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBatchPaymentHistory.');
            }
            // verify required parameter 'batchPaymentID' is not null or undefined
            if (batchPaymentID === null || batchPaymentID === undefined) {
                throw new Error('Required parameter batchPaymentID was null or undefined when calling getBatchPaymentHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves either one or many batch payments for invoices
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getBatchPayments(xeroTenantId, ifModifiedSince, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BatchPayments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBatchPayments.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BatchPayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific branding theme using a unique branding theme Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param brandingThemeID Unique identifier for a Branding Theme
     */
    getBrandingTheme(xeroTenantId, brandingThemeID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BrandingThemes/{BrandingThemeID}'
                .replace('{' + 'BrandingThemeID' + '}', encodeURIComponent(String(brandingThemeID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBrandingTheme.');
            }
            // verify required parameter 'brandingThemeID' is not null or undefined
            if (brandingThemeID === null || brandingThemeID === undefined) {
                throw new Error('Required parameter brandingThemeID was null or undefined when calling getBrandingTheme.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BrandingThemes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves the payment services for a specific branding theme
     * @param xeroTenantId Xero identifier for Tenant
     * @param brandingThemeID Unique identifier for a Branding Theme
     */
    getBrandingThemePaymentServices(xeroTenantId, brandingThemeID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BrandingThemes/{BrandingThemeID}/PaymentServices'
                .replace('{' + 'BrandingThemeID' + '}', encodeURIComponent(String(brandingThemeID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBrandingThemePaymentServices.');
            }
            // verify required parameter 'brandingThemeID' is not null or undefined
            if (brandingThemeID === null || brandingThemeID === undefined) {
                throw new Error('Required parameter brandingThemeID was null or undefined when calling getBrandingThemePaymentServices.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PaymentServices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves all the branding themes
     * @param xeroTenantId Xero identifier for Tenant
     */
    getBrandingThemes(xeroTenantId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BrandingThemes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBrandingThemes.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BrandingThemes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific budget, which includes budget lines
     * @param xeroTenantId Xero identifier for Tenant
     * @param budgetID Unique identifier for Budgets
     * @param dateTo Filter by start date
     * @param dateFrom Filter by end date
     */
    getBudget(xeroTenantId, budgetID, dateTo, dateFrom, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Budgets/{BudgetID}'
                .replace('{' + 'BudgetID' + '}', encodeURIComponent(String(budgetID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBudget.');
            }
            // verify required parameter 'budgetID' is not null or undefined
            if (budgetID === null || budgetID === undefined) {
                throw new Error('Required parameter budgetID was null or undefined when calling getBudget.');
            }
            if (dateTo !== undefined) {
                localVarQueryParameters['DateTo'] = models_1.ObjectSerializer.serialize(dateTo, "string");
            }
            if (dateFrom !== undefined) {
                localVarQueryParameters['DateFrom'] = models_1.ObjectSerializer.serialize(dateFrom, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Budgets");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieve a list of budgets
     * @param xeroTenantId Xero identifier for Tenant
     * @param iDs Filter by BudgetID. Allows you to retrieve a specific individual budget.
     * @param dateTo Filter by start date
     * @param dateFrom Filter by end date
     */
    getBudgets(xeroTenantId, iDs, dateTo, dateFrom, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Budgets';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getBudgets.');
            }
            if (iDs !== undefined) {
                localVarQueryParameters['IDs'] = models_1.ObjectSerializer.serialize(iDs, "Array<string>");
            }
            if (dateTo !== undefined) {
                localVarQueryParameters['DateTo'] = models_1.ObjectSerializer.serialize(dateTo, "string");
            }
            if (dateFrom !== undefined) {
                localVarQueryParameters['DateFrom'] = models_1.ObjectSerializer.serialize(dateFrom, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Budgets");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific contacts in a Xero organisation using a unique contact Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     */
    getContact(xeroTenantId, contactID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContact.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling getContact.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Contacts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific contact by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getContactAttachmentByFileName(xeroTenantId, contactID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}/Attachments/{FileName}'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContactAttachmentByFileName.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling getContactAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getContactAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getContactAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific contact using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getContactAttachmentById(xeroTenantId, contactID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}/Attachments/{AttachmentID}'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContactAttachmentById.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling getContactAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getContactAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getContactAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments for a specific contact in a Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     */
    getContactAttachments(xeroTenantId, contactID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}/Attachments'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContactAttachments.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling getContactAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific contact by contact number in a Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactNumber This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).
     */
    getContactByContactNumber(xeroTenantId, contactNumber, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactNumber}'
                .replace('{' + 'ContactNumber' + '}', encodeURIComponent(String(contactNumber)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContactByContactNumber.');
            }
            // verify required parameter 'contactNumber' is not null or undefined
            if (contactNumber === null || contactNumber === undefined) {
                throw new Error('Required parameter contactNumber was null or undefined when calling getContactByContactNumber.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Contacts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves CIS settings for a specific contact in a Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     */
    getContactCISSettings(xeroTenantId, contactID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}/CISSettings'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContactCISSettings.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling getContactCISSettings.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "CISSettings");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific contact group by using a unique contact group Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactGroupID Unique identifier for a Contact Group
     */
    getContactGroup(xeroTenantId, contactGroupID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ContactGroups/{ContactGroupID}'
                .replace('{' + 'ContactGroupID' + '}', encodeURIComponent(String(contactGroupID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContactGroup.');
            }
            // verify required parameter 'contactGroupID' is not null or undefined
            if (contactGroupID === null || contactGroupID === undefined) {
                throw new Error('Required parameter contactGroupID was null or undefined when calling getContactGroup.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ContactGroups");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves the contact Id and name of each contact group
     * @param xeroTenantId Xero identifier for Tenant
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getContactGroups(xeroTenantId, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ContactGroups';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContactGroups.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ContactGroups");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history records for a specific contact
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     */
    getContactHistory(xeroTenantId, contactID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}/History'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContactHistory.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling getContactHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves all contacts in a Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param iDs Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call.
     * @param page e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call.
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response
     * @param summaryOnly Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient.
     * @param searchTerm Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields.
     */
    getContacts(xeroTenantId, ifModifiedSince, where, order, iDs, page, includeArchived, summaryOnly, searchTerm, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getContacts.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (iDs !== undefined) {
                localVarQueryParameters['IDs'] = models_1.ObjectSerializer.serialize(iDs, "Array<string>");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (includeArchived !== undefined) {
                localVarQueryParameters['includeArchived'] = models_1.ObjectSerializer.serialize(includeArchived, "boolean");
            }
            if (summaryOnly !== undefined) {
                localVarQueryParameters['summaryOnly'] = models_1.ObjectSerializer.serialize(summaryOnly, "boolean");
            }
            if (searchTerm !== undefined) {
                localVarQueryParameters['searchTerm'] = models_1.ObjectSerializer.serialize(searchTerm, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Contacts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific credit note using a unique credit note Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getCreditNote(xeroTenantId, creditNoteID, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getCreditNote.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling getCreditNote.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "CreditNotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves credit notes as PDF files
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     */
    getCreditNoteAsPdf(xeroTenantId, creditNoteID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getCreditNoteAsPdf.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling getCreditNoteAsPdf.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment on a specific credit note by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}/Attachments/{FileName}'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling getCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getCreditNoteAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific credit note using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getCreditNoteAttachmentById(xeroTenantId, creditNoteID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getCreditNoteAttachmentById.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling getCreditNoteAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getCreditNoteAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getCreditNoteAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments for a specific credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     */
    getCreditNoteAttachments(xeroTenantId, creditNoteID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}/Attachments'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getCreditNoteAttachments.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling getCreditNoteAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history records of a specific credit note
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     */
    getCreditNoteHistory(xeroTenantId, creditNoteID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}/History'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getCreditNoteHistory.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling getCreditNoteHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves any credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getCreditNotes(xeroTenantId, ifModifiedSince, where, order, page, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getCreditNotes.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "CreditNotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves currencies for your Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getCurrencies(xeroTenantId, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Currencies';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getCurrencies.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Currencies");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific employee used in Xero payrun using a unique employee Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param employeeID Unique identifier for a Employee
     */
    getEmployee(xeroTenantId, employeeID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Employees/{EmployeeID}'
                .replace('{' + 'EmployeeID' + '}', encodeURIComponent(String(employeeID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getEmployee.');
            }
            // verify required parameter 'employeeID' is not null or undefined
            if (employeeID === null || employeeID === undefined) {
                throw new Error('Required parameter employeeID was null or undefined when calling getEmployee.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Employees");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves employees used in Xero payrun
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getEmployees(xeroTenantId, ifModifiedSince, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Employees';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getEmployees.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Employees");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific expense claim using a unique expense claim Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param expenseClaimID Unique identifier for a ExpenseClaim
     */
    getExpenseClaim(xeroTenantId, expenseClaimID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ExpenseClaims/{ExpenseClaimID}'
                .replace('{' + 'ExpenseClaimID' + '}', encodeURIComponent(String(expenseClaimID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getExpenseClaim.');
            }
            // verify required parameter 'expenseClaimID' is not null or undefined
            if (expenseClaimID === null || expenseClaimID === undefined) {
                throw new Error('Required parameter expenseClaimID was null or undefined when calling getExpenseClaim.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ExpenseClaims");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history records of a specific expense claim
     * @param xeroTenantId Xero identifier for Tenant
     * @param expenseClaimID Unique identifier for a ExpenseClaim
     */
    getExpenseClaimHistory(xeroTenantId, expenseClaimID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ExpenseClaims/{ExpenseClaimID}/History'
                .replace('{' + 'ExpenseClaimID' + '}', encodeURIComponent(String(expenseClaimID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getExpenseClaimHistory.');
            }
            // verify required parameter 'expenseClaimID' is not null or undefined
            if (expenseClaimID === null || expenseClaimID === undefined) {
                throw new Error('Required parameter expenseClaimID was null or undefined when calling getExpenseClaimHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves expense claims
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getExpenseClaims(xeroTenantId, ifModifiedSince, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ExpenseClaims';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getExpenseClaims.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ExpenseClaims");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific sales invoice or purchase bill using a unique invoice Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getInvoice(xeroTenantId, invoiceID, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getInvoice.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling getInvoice.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Invoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves invoices or purchase bills as PDF files
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     */
    getInvoiceAsPdf(xeroTenantId, invoiceID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getInvoiceAsPdf.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling getInvoiceAsPdf.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves an attachment from a specific invoice or purchase bill by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/Attachments/{FileName}'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling getInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getInvoiceAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getInvoiceAttachmentById(xeroTenantId, invoiceID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/Attachments/{AttachmentID}'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getInvoiceAttachmentById.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling getInvoiceAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getInvoiceAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getInvoiceAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments for a specific invoice or purchase bill
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     */
    getInvoiceAttachments(xeroTenantId, invoiceID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/Attachments'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getInvoiceAttachments.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling getInvoiceAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history records for a specific invoice
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     */
    getInvoiceHistory(xeroTenantId, invoiceID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/History'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getInvoiceHistory.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling getInvoiceHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves invoice reminder settings
     * @param xeroTenantId Xero identifier for Tenant
     */
    getInvoiceReminders(xeroTenantId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/InvoiceReminders/Settings';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getInvoiceReminders.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "InvoiceReminders");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves sales invoices or purchase bills
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param iDs Filter by a comma-separated list of InvoicesIDs.
     * @param invoiceNumbers Filter by a comma-separated list of InvoiceNumbers.
     * @param contactIDs Filter by a comma-separated list of ContactIDs.
     * @param statuses Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter.
     * @param page e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice
     * @param includeArchived e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response
     * @param createdByMyApp When set to true you\&#39;ll only retrieve Invoices created by your app
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param summaryOnly Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient.
     */
    getInvoices(xeroTenantId, ifModifiedSince, where, order, iDs, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp, summaryOnly, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getInvoices.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (iDs !== undefined) {
                localVarQueryParameters['IDs'] = models_1.ObjectSerializer.serialize(iDs, "Array<string>");
            }
            if (invoiceNumbers !== undefined) {
                localVarQueryParameters['InvoiceNumbers'] = models_1.ObjectSerializer.serialize(invoiceNumbers, "Array<string>");
            }
            if (contactIDs !== undefined) {
                localVarQueryParameters['ContactIDs'] = models_1.ObjectSerializer.serialize(contactIDs, "Array<string>");
            }
            if (statuses !== undefined) {
                localVarQueryParameters['Statuses'] = models_1.ObjectSerializer.serialize(statuses, "Array<string>");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (includeArchived !== undefined) {
                localVarQueryParameters['includeArchived'] = models_1.ObjectSerializer.serialize(includeArchived, "boolean");
            }
            if (createdByMyApp !== undefined) {
                localVarQueryParameters['createdByMyApp'] = models_1.ObjectSerializer.serialize(createdByMyApp, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            if (summaryOnly !== undefined) {
                localVarQueryParameters['summaryOnly'] = models_1.ObjectSerializer.serialize(summaryOnly, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Invoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific item using a unique item Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param itemID Unique identifier for an Item
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getItem(xeroTenantId, itemID, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Items/{ItemID}'
                .replace('{' + 'ItemID' + '}', encodeURIComponent(String(itemID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getItem.');
            }
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new Error('Required parameter itemID was null or undefined when calling getItem.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Items");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history for a specific item
     * @param xeroTenantId Xero identifier for Tenant
     * @param itemID Unique identifier for an Item
     */
    getItemHistory(xeroTenantId, itemID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Items/{ItemID}/History'
                .replace('{' + 'ItemID' + '}', encodeURIComponent(String(itemID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getItemHistory.');
            }
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new Error('Required parameter itemID was null or undefined when calling getItemHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves items
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getItems(xeroTenantId, ifModifiedSince, where, order, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Items';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getItems.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Items");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific journal using a unique journal Id.
     * @param xeroTenantId Xero identifier for Tenant
     * @param journalID Unique identifier for a Journal
     */
    getJournal(xeroTenantId, journalID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Journals/{JournalID}'
                .replace('{' + 'JournalID' + '}', encodeURIComponent(String(journalID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getJournal.');
            }
            // verify required parameter 'journalID' is not null or undefined
            if (journalID === null || journalID === undefined) {
                throw new Error('Required parameter journalID was null or undefined when calling getJournal.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Journals");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific journal using a unique journal number.
     * @param xeroTenantId Xero identifier for Tenant
     * @param journalNumber Number of a Journal
     */
    getJournalByNumber(xeroTenantId, journalNumber, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Journals/{JournalNumber}'
                .replace('{' + 'JournalNumber' + '}', encodeURIComponent(String(journalNumber)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getJournalByNumber.');
            }
            // verify required parameter 'journalNumber' is not null or undefined
            if (journalNumber === null || journalNumber === undefined) {
                throw new Error('Required parameter journalNumber was null or undefined when calling getJournalByNumber.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Journals");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves journals
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param offset Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned
     * @param paymentsOnly Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default.
     */
    getJournals(xeroTenantId, ifModifiedSince, offset, paymentsOnly, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Journals';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getJournals.');
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (paymentsOnly !== undefined) {
                localVarQueryParameters['paymentsOnly'] = models_1.ObjectSerializer.serialize(paymentsOnly, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Journals");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param linkedTransactionID Unique identifier for a LinkedTransaction
     */
    getLinkedTransaction(xeroTenantId, linkedTransactionID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LinkedTransactions/{LinkedTransactionID}'
                .replace('{' + 'LinkedTransactionID' + '}', encodeURIComponent(String(linkedTransactionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getLinkedTransaction.');
            }
            // verify required parameter 'linkedTransactionID' is not null or undefined
            if (linkedTransactionID === null || linkedTransactionID === undefined) {
                throw new Error('Required parameter linkedTransactionID was null or undefined when calling getLinkedTransaction.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "LinkedTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves linked transactions (billable expenses)
     * @param xeroTenantId Xero identifier for Tenant
     * @param page Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1.
     * @param linkedTransactionID The Xero identifier for an Linked Transaction
     * @param sourceTransactionID Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice
     * @param contactID Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer.
     * @param status Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status
     * @param targetTransactionID Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice
     */
    getLinkedTransactions(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LinkedTransactions';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getLinkedTransactions.');
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (linkedTransactionID !== undefined) {
                localVarQueryParameters['LinkedTransactionID'] = models_1.ObjectSerializer.serialize(linkedTransactionID, "string");
            }
            if (sourceTransactionID !== undefined) {
                localVarQueryParameters['SourceTransactionID'] = models_1.ObjectSerializer.serialize(sourceTransactionID, "string");
            }
            if (contactID !== undefined) {
                localVarQueryParameters['ContactID'] = models_1.ObjectSerializer.serialize(contactID, "string");
            }
            if (status !== undefined) {
                localVarQueryParameters['Status'] = models_1.ObjectSerializer.serialize(status, "string");
            }
            if (targetTransactionID !== undefined) {
                localVarQueryParameters['TargetTransactionID'] = models_1.ObjectSerializer.serialize(targetTransactionID, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "LinkedTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific manual journal
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     */
    getManualJournal(xeroTenantId, manualJournalID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getManualJournal.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling getManualJournal.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ManualJournals");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific manual journal by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}/Attachments/{FileName}'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling getManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getManualJournalAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getManualJournalAttachmentById(xeroTenantId, manualJournalID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getManualJournalAttachmentById.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling getManualJournalAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getManualJournalAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getManualJournalAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachment for a specific manual journal
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     */
    getManualJournalAttachments(xeroTenantId, manualJournalID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}/Attachments'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getManualJournalAttachments.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling getManualJournalAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves manual journals
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment
     */
    getManualJournals(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getManualJournals.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ManualJournals");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history for a specific manual journal
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     */
    getManualJournalsHistory(xeroTenantId, manualJournalID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}/History'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getManualJournalsHistory.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling getManualJournalsHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a URL to an online invoice
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     */
    getOnlineInvoice(xeroTenantId, invoiceID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/OnlineInvoice'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getOnlineInvoice.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling getOnlineInvoice.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "OnlineInvoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
     * @param xeroTenantId Xero identifier for Tenant
     */
    getOrganisationActions(xeroTenantId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Organisation/Actions';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getOrganisationActions.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Actions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves the CIS settings for the Xero organistaion.
     * @param xeroTenantId Xero identifier for Tenant
     * @param organisationID The unique Xero identifier for an organisation
     */
    getOrganisationCISSettings(xeroTenantId, organisationID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Organisation/{OrganisationID}/CISSettings'
                .replace('{' + 'OrganisationID' + '}', encodeURIComponent(String(organisationID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getOrganisationCISSettings.');
            }
            // verify required parameter 'organisationID' is not null or undefined
            if (organisationID === null || organisationID === undefined) {
                throw new Error('Required parameter organisationID was null or undefined when calling getOrganisationCISSettings.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "CISOrgSettings");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves Xero organisation details
     * @param xeroTenantId Xero identifier for Tenant
     */
    getOrganisations(xeroTenantId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Organisation';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getOrganisations.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Organisations");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific overpayment using a unique overpayment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param overpaymentID Unique identifier for a Overpayment
     */
    getOverpayment(xeroTenantId, overpaymentID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Overpayments/{OverpaymentID}'
                .replace('{' + 'OverpaymentID' + '}', encodeURIComponent(String(overpaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getOverpayment.');
            }
            // verify required parameter 'overpaymentID' is not null or undefined
            if (overpaymentID === null || overpaymentID === undefined) {
                throw new Error('Required parameter overpaymentID was null or undefined when calling getOverpayment.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Overpayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history records of a specific overpayment
     * @param xeroTenantId Xero identifier for Tenant
     * @param overpaymentID Unique identifier for a Overpayment
     */
    getOverpaymentHistory(xeroTenantId, overpaymentID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Overpayments/{OverpaymentID}/History'
                .replace('{' + 'OverpaymentID' + '}', encodeURIComponent(String(overpaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getOverpaymentHistory.');
            }
            // verify required parameter 'overpaymentID' is not null or undefined
            if (overpaymentID === null || overpaymentID === undefined) {
                throw new Error('Required parameter overpaymentID was null or undefined when calling getOverpaymentHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves overpayments
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getOverpayments(xeroTenantId, ifModifiedSince, where, order, page, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Overpayments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getOverpayments.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Overpayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific payment for invoices and credit notes using a unique payment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param paymentID Unique identifier for a Payment
     */
    getPayment(xeroTenantId, paymentID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payments/{PaymentID}'
                .replace('{' + 'PaymentID' + '}', encodeURIComponent(String(paymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPayment.');
            }
            // verify required parameter 'paymentID' is not null or undefined
            if (paymentID === null || paymentID === undefined) {
                throw new Error('Required parameter paymentID was null or undefined when calling getPayment.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Payments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history records of a specific payment
     * @param xeroTenantId Xero identifier for Tenant
     * @param paymentID Unique identifier for a Payment
     */
    getPaymentHistory(xeroTenantId, paymentID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payments/{PaymentID}/History'
                .replace('{' + 'PaymentID' + '}', encodeURIComponent(String(paymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPaymentHistory.');
            }
            // verify required parameter 'paymentID' is not null or undefined
            if (paymentID === null || paymentID === undefined) {
                throw new Error('Required parameter paymentID was null or undefined when calling getPaymentHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves payment services
     * @param xeroTenantId Xero identifier for Tenant
     */
    getPaymentServices(xeroTenantId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PaymentServices';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPaymentServices.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PaymentServices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves payments for invoices and credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page Up to 100 payments will be returned in a single API call
     */
    getPayments(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPayments.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Payments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Allows you to retrieve a specified prepayments
     * @param xeroTenantId Xero identifier for Tenant
     * @param prepaymentID Unique identifier for a PrePayment
     */
    getPrepayment(xeroTenantId, prepaymentID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Prepayments/{PrepaymentID}'
                .replace('{' + 'PrepaymentID' + '}', encodeURIComponent(String(prepaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPrepayment.');
            }
            // verify required parameter 'prepaymentID' is not null or undefined
            if (prepaymentID === null || prepaymentID === undefined) {
                throw new Error('Required parameter prepaymentID was null or undefined when calling getPrepayment.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Prepayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history record for a specific prepayment
     * @param xeroTenantId Xero identifier for Tenant
     * @param prepaymentID Unique identifier for a PrePayment
     */
    getPrepaymentHistory(xeroTenantId, prepaymentID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Prepayments/{PrepaymentID}/History'
                .replace('{' + 'PrepaymentID' + '}', encodeURIComponent(String(prepaymentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPrepaymentHistory.');
            }
            // verify required parameter 'prepaymentID' is not null or undefined
            if (prepaymentID === null || prepaymentID === undefined) {
                throw new Error('Required parameter prepaymentID was null or undefined when calling getPrepaymentHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves prepayments
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getPrepayments(xeroTenantId, ifModifiedSince, where, order, page, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Prepayments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPrepayments.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Prepayments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific purchase order using a unique purchase order Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     */
    getPurchaseOrder(xeroTenantId, purchaseOrderID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPurchaseOrder.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling getPurchaseOrder.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PurchaseOrders");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves specific purchase order as PDF files using a unique purchase order Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     */
    getPurchaseOrderAsPdf(xeroTenantId, purchaseOrderID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPurchaseOrderAsPdf.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling getPurchaseOrderAsPdf.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment for a specific purchase order by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getPurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling getPurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getPurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getPurchaseOrderAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves specific attachment for a specific purchase order using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getPurchaseOrderAttachmentById(xeroTenantId, purchaseOrderID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}/Attachments/{AttachmentID}'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPurchaseOrderAttachmentById.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling getPurchaseOrderAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getPurchaseOrderAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getPurchaseOrderAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments for a specific purchase order
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     */
    getPurchaseOrderAttachments(xeroTenantId, purchaseOrderID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}/Attachments'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPurchaseOrderAttachments.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling getPurchaseOrderAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific purchase order using purchase order number
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderNumber Unique identifier for a PurchaseOrder
     */
    getPurchaseOrderByNumber(xeroTenantId, purchaseOrderNumber, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderNumber}'
                .replace('{' + 'PurchaseOrderNumber' + '}', encodeURIComponent(String(purchaseOrderNumber)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPurchaseOrderByNumber.');
            }
            // verify required parameter 'purchaseOrderNumber' is not null or undefined
            if (purchaseOrderNumber === null || purchaseOrderNumber === undefined) {
                throw new Error('Required parameter purchaseOrderNumber was null or undefined when calling getPurchaseOrderByNumber.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PurchaseOrders");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history for a specific purchase order
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     */
    getPurchaseOrderHistory(xeroTenantId, purchaseOrderID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}/History'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPurchaseOrderHistory.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling getPurchaseOrderHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves purchase orders
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param status Filter by purchase order status
     * @param dateFrom Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31
     * @param dateTo Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31
     * @param order Order by an any element
     * @param page To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned.
     */
    getPurchaseOrders(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPurchaseOrders.');
            }
            if (status !== undefined) {
                localVarQueryParameters['Status'] = models_1.ObjectSerializer.serialize(status, "'DRAFT' | 'SUBMITTED' | 'AUTHORISED' | 'BILLED' | 'DELETED'");
            }
            if (dateFrom !== undefined) {
                localVarQueryParameters['DateFrom'] = models_1.ObjectSerializer.serialize(dateFrom, "string");
            }
            if (dateTo !== undefined) {
                localVarQueryParameters['DateTo'] = models_1.ObjectSerializer.serialize(dateTo, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PurchaseOrders");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific quote using a unique quote Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     */
    getQuote(xeroTenantId, quoteID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getQuote.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling getQuote.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Quotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific quote as a PDF file using a unique quote Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     */
    getQuoteAsPdf(xeroTenantId, quoteID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getQuoteAsPdf.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling getQuoteAsPdf.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific quote by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}/Attachments/{FileName}'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getQuoteAttachmentByFileName.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling getQuoteAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getQuoteAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getQuoteAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific quote using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getQuoteAttachmentById(xeroTenantId, quoteID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}/Attachments/{AttachmentID}'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getQuoteAttachmentById.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling getQuoteAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getQuoteAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getQuoteAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments for a specific quote
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     */
    getQuoteAttachments(xeroTenantId, quoteID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}/Attachments'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getQuoteAttachments.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling getQuoteAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history records of a specific quote
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     */
    getQuoteHistory(xeroTenantId, quoteID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}/History'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getQuoteHistory.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling getQuoteHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves sales quotes
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param dateFrom Filter for quotes after a particular date
     * @param dateTo Filter for quotes before a particular date
     * @param expiryDateFrom Filter for quotes expiring after a particular date
     * @param expiryDateTo Filter for quotes before a particular date
     * @param contactID Filter for quotes belonging to a particular contact
     * @param status Filter for quotes of a particular Status
     * @param page e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote
     * @param order Order by an any element
     * @param quoteNumber Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001)
     */
    getQuotes(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getQuotes.');
            }
            if (dateFrom !== undefined) {
                localVarQueryParameters['DateFrom'] = models_1.ObjectSerializer.serialize(dateFrom, "string");
            }
            if (dateTo !== undefined) {
                localVarQueryParameters['DateTo'] = models_1.ObjectSerializer.serialize(dateTo, "string");
            }
            if (expiryDateFrom !== undefined) {
                localVarQueryParameters['ExpiryDateFrom'] = models_1.ObjectSerializer.serialize(expiryDateFrom, "string");
            }
            if (expiryDateTo !== undefined) {
                localVarQueryParameters['ExpiryDateTo'] = models_1.ObjectSerializer.serialize(expiryDateTo, "string");
            }
            if (contactID !== undefined) {
                localVarQueryParameters['ContactID'] = models_1.ObjectSerializer.serialize(contactID, "string");
            }
            if (status !== undefined) {
                localVarQueryParameters['Status'] = models_1.ObjectSerializer.serialize(status, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (quoteNumber !== undefined) {
                localVarQueryParameters['QuoteNumber'] = models_1.ObjectSerializer.serialize(quoteNumber, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Quotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific draft expense claim receipt by using a unique receipt Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getReceipt(xeroTenantId, receiptID, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReceipt.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling getReceipt.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Receipts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific expense claim receipts by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}/Attachments/{FileName}'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReceiptAttachmentByFileName.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling getReceiptAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getReceiptAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getReceiptAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getReceiptAttachmentById(xeroTenantId, receiptID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}/Attachments/{AttachmentID}'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReceiptAttachmentById.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling getReceiptAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getReceiptAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getReceiptAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments for a specific expense claim receipt
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     */
    getReceiptAttachments(xeroTenantId, receiptID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}/Attachments'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReceiptAttachments.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling getReceiptAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a history record for a specific receipt
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     */
    getReceiptHistory(xeroTenantId, receiptID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}/History'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReceiptHistory.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling getReceiptHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves draft expense claim receipts for any user
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    getReceipts(xeroTenantId, ifModifiedSince, where, order, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReceipts.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Receipts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific repeating invoice by using a unique repeating invoice Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     */
    getRepeatingInvoice(xeroTenantId, repeatingInvoiceID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getRepeatingInvoice.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling getRepeatingInvoice.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "RepeatingInvoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific repeating invoices by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param fileName Name of the attachment
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling getRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling getRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getRepeatingInvoiceAttachmentByFileName.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific attachment from a specific repeating invoice
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param attachmentID Unique identifier for Attachment object
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     */
    getRepeatingInvoiceAttachmentById(xeroTenantId, repeatingInvoiceID, attachmentID, contentType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)))
                .replace('{' + 'AttachmentID' + '}', encodeURIComponent(String(attachmentID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getRepeatingInvoiceAttachmentById.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling getRepeatingInvoiceAttachmentById.');
            }
            // verify required parameter 'attachmentID' is not null or undefined
            if (attachmentID === null || attachmentID === undefined) {
                throw new Error('Required parameter attachmentID was null or undefined when calling getRepeatingInvoiceAttachmentById.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new Error('Required parameter contentType was null or undefined when calling getRepeatingInvoiceAttachmentById.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['contentType'] = models_1.ObjectSerializer.serialize(contentType, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves attachments from a specific repeating invoice
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     */
    getRepeatingInvoiceAttachments(xeroTenantId, repeatingInvoiceID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getRepeatingInvoiceAttachments.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling getRepeatingInvoiceAttachments.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves history record for a specific repeating invoice
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     */
    getRepeatingInvoiceHistory(xeroTenantId, repeatingInvoiceID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}/History'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getRepeatingInvoiceHistory.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling getRepeatingInvoiceHistory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "HistoryRecords");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves repeating invoices
     * @param xeroTenantId Xero identifier for Tenant
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getRepeatingInvoices(xeroTenantId, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getRepeatingInvoices.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "RepeatingInvoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves report for aged payables by contact
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactId Unique identifier for a Contact
     * @param date The date of the Aged Payables By Contact report
     * @param fromDate filter by the from date of the report e.g. 2021-02-01
     * @param toDate filter by the to date of the report e.g. 2021-02-28
     */
    getReportAgedPayablesByContact(xeroTenantId, contactId, date, fromDate, toDate, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/AgedPayablesByContact';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportAgedPayablesByContact.');
            }
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new Error('Required parameter contactId was null or undefined when calling getReportAgedPayablesByContact.');
            }
            if (contactId !== undefined) {
                localVarQueryParameters['contactId'] = models_1.ObjectSerializer.serialize(contactId, "string");
            }
            if (date !== undefined) {
                localVarQueryParameters['date'] = models_1.ObjectSerializer.serialize(date, "string");
            }
            if (fromDate !== undefined) {
                localVarQueryParameters['fromDate'] = models_1.ObjectSerializer.serialize(fromDate, "string");
            }
            if (toDate !== undefined) {
                localVarQueryParameters['toDate'] = models_1.ObjectSerializer.serialize(toDate, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves report for aged receivables by contact
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactId Unique identifier for a Contact
     * @param date The date of the Aged Receivables By Contact report
     * @param fromDate filter by the from date of the report e.g. 2021-02-01
     * @param toDate filter by the to date of the report e.g. 2021-02-28
     */
    getReportAgedReceivablesByContact(xeroTenantId, contactId, date, fromDate, toDate, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/AgedReceivablesByContact';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportAgedReceivablesByContact.');
            }
            // verify required parameter 'contactId' is not null or undefined
            if (contactId === null || contactId === undefined) {
                throw new Error('Required parameter contactId was null or undefined when calling getReportAgedReceivablesByContact.');
            }
            if (contactId !== undefined) {
                localVarQueryParameters['contactId'] = models_1.ObjectSerializer.serialize(contactId, "string");
            }
            if (date !== undefined) {
                localVarQueryParameters['date'] = models_1.ObjectSerializer.serialize(date, "string");
            }
            if (fromDate !== undefined) {
                localVarQueryParameters['fromDate'] = models_1.ObjectSerializer.serialize(fromDate, "string");
            }
            if (toDate !== undefined) {
                localVarQueryParameters['toDate'] = models_1.ObjectSerializer.serialize(toDate, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves report for balancesheet
     * @param xeroTenantId Xero identifier for Tenant
     * @param date The date of the Balance Sheet report
     * @param periods The number of periods for the Balance Sheet report
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR)
     * @param trackingOptionID1 The tracking option 1 for the Balance Sheet report
     * @param trackingOptionID2 The tracking option 2 for the Balance Sheet report
     * @param standardLayout The standard layout boolean for the Balance Sheet report
     * @param paymentsOnly return a cash basis for the Balance Sheet report
     */
    getReportBalanceSheet(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/BalanceSheet';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportBalanceSheet.');
            }
            if (date !== undefined) {
                localVarQueryParameters['date'] = models_1.ObjectSerializer.serialize(date, "string");
            }
            if (periods !== undefined) {
                localVarQueryParameters['periods'] = models_1.ObjectSerializer.serialize(periods, "number");
            }
            if (timeframe !== undefined) {
                localVarQueryParameters['timeframe'] = models_1.ObjectSerializer.serialize(timeframe, "'MONTH' | 'QUARTER' | 'YEAR'");
            }
            if (trackingOptionID1 !== undefined) {
                localVarQueryParameters['trackingOptionID1'] = models_1.ObjectSerializer.serialize(trackingOptionID1, "string");
            }
            if (trackingOptionID2 !== undefined) {
                localVarQueryParameters['trackingOptionID2'] = models_1.ObjectSerializer.serialize(trackingOptionID2, "string");
            }
            if (standardLayout !== undefined) {
                localVarQueryParameters['standardLayout'] = models_1.ObjectSerializer.serialize(standardLayout, "boolean");
            }
            if (paymentsOnly !== undefined) {
                localVarQueryParameters['paymentsOnly'] = models_1.ObjectSerializer.serialize(paymentsOnly, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves report for bank summary
     * @param xeroTenantId Xero identifier for Tenant
     * @param fromDate filter by the from date of the report e.g. 2021-02-01
     * @param toDate filter by the to date of the report e.g. 2021-02-28
     */
    getReportBankSummary(xeroTenantId, fromDate, toDate, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/BankSummary';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportBankSummary.');
            }
            if (fromDate !== undefined) {
                localVarQueryParameters['fromDate'] = models_1.ObjectSerializer.serialize(fromDate, "string");
            }
            if (toDate !== undefined) {
                localVarQueryParameters['toDate'] = models_1.ObjectSerializer.serialize(toDate, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves report for budget summary
     * @param xeroTenantId Xero identifier for Tenant
     * @param date The date for the Bank Summary report e.g. 2018-03-31
     * @param periods The number of periods to compare (integer between 1 and 12)
     * @param timeframe The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year)
     */
    getReportBudgetSummary(xeroTenantId, date, periods, timeframe, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/BudgetSummary';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportBudgetSummary.');
            }
            if (date !== undefined) {
                localVarQueryParameters['date'] = models_1.ObjectSerializer.serialize(date, "string");
            }
            if (periods !== undefined) {
                localVarQueryParameters['periods'] = models_1.ObjectSerializer.serialize(periods, "number");
            }
            if (timeframe !== undefined) {
                localVarQueryParameters['timeframe'] = models_1.ObjectSerializer.serialize(timeframe, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves report for executive summary
     * @param xeroTenantId Xero identifier for Tenant
     * @param date The date for the Bank Summary report e.g. 2018-03-31
     */
    getReportExecutiveSummary(xeroTenantId, date, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/ExecutiveSummary';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportExecutiveSummary.');
            }
            if (date !== undefined) {
                localVarQueryParameters['date'] = models_1.ObjectSerializer.serialize(date, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific report using a unique ReportID
     * @param xeroTenantId Xero identifier for Tenant
     * @param reportID Unique identifier for a Report
     */
    getReportFromId(xeroTenantId, reportID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/{ReportID}'
                .replace('{' + 'ReportID' + '}', encodeURIComponent(String(reportID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportFromId.');
            }
            // verify required parameter 'reportID' is not null or undefined
            if (reportID === null || reportID === undefined) {
                throw new Error('Required parameter reportID was null or undefined when calling getReportFromId.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves report for profit and loss
     * @param xeroTenantId Xero identifier for Tenant
     * @param fromDate filter by the from date of the report e.g. 2021-02-01
     * @param toDate filter by the to date of the report e.g. 2021-02-28
     * @param periods The number of periods to compare (integer between 1 and 12)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR)
     * @param trackingCategoryID The trackingCategory 1 for the ProfitAndLoss report
     * @param trackingCategoryID2 The trackingCategory 2 for the ProfitAndLoss report
     * @param trackingOptionID The tracking option 1 for the ProfitAndLoss report
     * @param trackingOptionID2 The tracking option 2 for the ProfitAndLoss report
     * @param standardLayout Return the standard layout for the ProfitAndLoss report
     * @param paymentsOnly Return cash only basis for the ProfitAndLoss report
     */
    getReportProfitAndLoss(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/ProfitAndLoss';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportProfitAndLoss.');
            }
            if (fromDate !== undefined) {
                localVarQueryParameters['fromDate'] = models_1.ObjectSerializer.serialize(fromDate, "string");
            }
            if (toDate !== undefined) {
                localVarQueryParameters['toDate'] = models_1.ObjectSerializer.serialize(toDate, "string");
            }
            if (periods !== undefined) {
                localVarQueryParameters['periods'] = models_1.ObjectSerializer.serialize(periods, "number");
            }
            if (timeframe !== undefined) {
                localVarQueryParameters['timeframe'] = models_1.ObjectSerializer.serialize(timeframe, "'MONTH' | 'QUARTER' | 'YEAR'");
            }
            if (trackingCategoryID !== undefined) {
                localVarQueryParameters['trackingCategoryID'] = models_1.ObjectSerializer.serialize(trackingCategoryID, "string");
            }
            if (trackingCategoryID2 !== undefined) {
                localVarQueryParameters['trackingCategoryID2'] = models_1.ObjectSerializer.serialize(trackingCategoryID2, "string");
            }
            if (trackingOptionID !== undefined) {
                localVarQueryParameters['trackingOptionID'] = models_1.ObjectSerializer.serialize(trackingOptionID, "string");
            }
            if (trackingOptionID2 !== undefined) {
                localVarQueryParameters['trackingOptionID2'] = models_1.ObjectSerializer.serialize(trackingOptionID2, "string");
            }
            if (standardLayout !== undefined) {
                localVarQueryParameters['standardLayout'] = models_1.ObjectSerializer.serialize(standardLayout, "boolean");
            }
            if (paymentsOnly !== undefined) {
                localVarQueryParameters['paymentsOnly'] = models_1.ObjectSerializer.serialize(paymentsOnly, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieve reports for 1099
     * @param xeroTenantId Xero identifier for Tenant
     * @param reportYear The year of the 1099 report
     */
    getReportTenNinetyNine(xeroTenantId, reportYear, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/TenNinetyNine';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportTenNinetyNine.');
            }
            if (reportYear !== undefined) {
                localVarQueryParameters['reportYear'] = models_1.ObjectSerializer.serialize(reportYear, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Reports");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves report for trial balance
     * @param xeroTenantId Xero identifier for Tenant
     * @param date The date for the Trial Balance report e.g. 2018-03-31
     * @param paymentsOnly Return cash only basis for the Trial Balance report
     */
    getReportTrialBalance(xeroTenantId, date, paymentsOnly, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports/TrialBalance';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportTrialBalance.');
            }
            if (date !== undefined) {
                localVarQueryParameters['date'] = models_1.ObjectSerializer.serialize(date, "string");
            }
            if (paymentsOnly !== undefined) {
                localVarQueryParameters['paymentsOnly'] = models_1.ObjectSerializer.serialize(paymentsOnly, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a list of the organistaions unique reports that require a uuid to fetch
     * @param xeroTenantId Xero identifier for Tenant
     */
    getReportsList(xeroTenantId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getReportsList.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ReportWithRows");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves tax rates
     * @param xeroTenantId Xero identifier for Tenant
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param taxType Filter by tax type
     */
    getTaxRates(xeroTenantId, where, order, taxType, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TaxRates';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getTaxRates.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (taxType !== undefined) {
                localVarQueryParameters['TaxType'] = models_1.ObjectSerializer.serialize(taxType, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TaxRates");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves tracking categories and options
     * @param xeroTenantId Xero identifier for Tenant
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param includeArchived e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response
     */
    getTrackingCategories(xeroTenantId, where, order, includeArchived, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TrackingCategories';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getTrackingCategories.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (includeArchived !== undefined) {
                localVarQueryParameters['includeArchived'] = models_1.ObjectSerializer.serialize(includeArchived, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TrackingCategories");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves specific tracking categories and options using a unique tracking category Id
     * @param xeroTenantId Xero identifier for Tenant
     * @param trackingCategoryID Unique identifier for a TrackingCategory
     */
    getTrackingCategory(xeroTenantId, trackingCategoryID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TrackingCategories/{TrackingCategoryID}'
                .replace('{' + 'TrackingCategoryID' + '}', encodeURIComponent(String(trackingCategoryID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getTrackingCategory.');
            }
            // verify required parameter 'trackingCategoryID' is not null or undefined
            if (trackingCategoryID === null || trackingCategoryID === undefined) {
                throw new Error('Required parameter trackingCategoryID was null or undefined when calling getTrackingCategory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TrackingCategories");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves a specific user
     * @param xeroTenantId Xero identifier for Tenant
     * @param userID Unique identifier for a User
     */
    getUser(xeroTenantId, userID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Users/{UserID}'
                .replace('{' + 'UserID' + '}', encodeURIComponent(String(userID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getUser.');
            }
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new Error('Required parameter userID was null or undefined when calling getUser.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Users");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Retrieves users
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     */
    getUsers(xeroTenantId, ifModifiedSince, where, order, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Users';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getUsers.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Users");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Sets the chart of accounts, the conversion date and conversion balances
     * @param xeroTenantId Xero identifier for Tenant
     * @param setup Object including an accounts array, a conversion balances array and a conversion date object in body of request
     */
    postSetup(xeroTenantId, setup, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Setup';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling postSetup.');
            }
            // verify required parameter 'setup' is not null or undefined
            if (setup === null || setup === undefined) {
                throw new Error('Required parameter setup was null or undefined when calling postSetup.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(setup, "Setup")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ImportSummaryObject");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a chart of accounts
     * @param xeroTenantId Xero identifier for Tenant
     * @param accountID Unique identifier for Account object
     * @param accounts Request of type Accounts array with one Account
     */
    updateAccount(xeroTenantId, accountID, accounts, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts/{AccountID}'
                .replace('{' + 'AccountID' + '}', encodeURIComponent(String(accountID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new Error('Required parameter accountID was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'accounts' is not null or undefined
            if (accounts === null || accounts === undefined) {
                throw new Error('Required parameter accounts was null or undefined when calling updateAccount.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(accounts, "Accounts")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Accounts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates attachment on a specific account by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param accountID Unique identifier for Account object
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateAccountAttachmentByFileName(xeroTenantId, accountID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Accounts/{AccountID}/Attachments/{FileName}'
                .replace('{' + 'AccountID' + '}', encodeURIComponent(String(accountID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateAccountAttachmentByFileName.');
            }
            // verify required parameter 'accountID' is not null or undefined
            if (accountID === null || accountID === undefined) {
                throw new Error('Required parameter accountID was null or undefined when calling updateAccountAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateAccountAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateAccountAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a single spent or received money transaction
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     * @param bankTransactions
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateBankTransaction(xeroTenantId, bankTransactionID, bankTransactions, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateBankTransaction.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling updateBankTransaction.');
            }
            // verify required parameter 'bankTransactions' is not null or undefined
            if (bankTransactions === null || bankTransactions === undefined) {
                throw new Error('Required parameter bankTransactions was null or undefined when calling updateBankTransaction.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(bankTransactions, "BankTransactions")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BankTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific attachment from a specific bank transaction by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactionID Xero generated unique identifier for a bank transaction
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions/{BankTransactionID}/Attachments/{FileName}'
                .replace('{' + 'BankTransactionID' + '}', encodeURIComponent(String(bankTransactionID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'bankTransactionID' is not null or undefined
            if (bankTransactionID === null || bankTransactionID === undefined) {
                throw new Error('Required parameter bankTransactionID was null or undefined when calling updateBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateBankTransactionAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateBankTransactionAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransferID Xero generated unique identifier for a bank transfer
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransfers/{BankTransferID}/Attachments/{FileName}'
                .replace('{' + 'BankTransferID' + '}', encodeURIComponent(String(bankTransferID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'bankTransferID' is not null or undefined
            if (bankTransferID === null || bankTransferID === undefined) {
                throw new Error('Required parameter bankTransferID was null or undefined when calling updateBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateBankTransferAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateBankTransferAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific contact in a Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     * @param contacts an array of Contacts containing single Contact object with properties to update
     */
    updateContact(xeroTenantId, contactID, contacts, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateContact.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling updateContact.');
            }
            // verify required parameter 'contacts' is not null or undefined
            if (contacts === null || contacts === undefined) {
                throw new Error('Required parameter contacts was null or undefined when calling updateContact.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(contacts, "Contacts")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Contacts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactID Unique identifier for a Contact
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateContactAttachmentByFileName(xeroTenantId, contactID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts/{ContactID}/Attachments/{FileName}'
                .replace('{' + 'ContactID' + '}', encodeURIComponent(String(contactID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateContactAttachmentByFileName.');
            }
            // verify required parameter 'contactID' is not null or undefined
            if (contactID === null || contactID === undefined) {
                throw new Error('Required parameter contactID was null or undefined when calling updateContactAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateContactAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateContactAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific contact group
     * @param xeroTenantId Xero identifier for Tenant
     * @param contactGroupID Unique identifier for a Contact Group
     * @param contactGroups an array of Contact groups with Name of specific group to update
     */
    updateContactGroup(xeroTenantId, contactGroupID, contactGroups, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ContactGroups/{ContactGroupID}'
                .replace('{' + 'ContactGroupID' + '}', encodeURIComponent(String(contactGroupID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateContactGroup.');
            }
            // verify required parameter 'contactGroupID' is not null or undefined
            if (contactGroupID === null || contactGroupID === undefined) {
                throw new Error('Required parameter contactGroupID was null or undefined when calling updateContactGroup.');
            }
            // verify required parameter 'contactGroups' is not null or undefined
            if (contactGroups === null || contactGroups === undefined) {
                throw new Error('Required parameter contactGroups was null or undefined when calling updateContactGroup.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(contactGroups, "ContactGroups")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ContactGroups");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific credit note
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     * @param creditNotes an array of Credit Notes containing credit note details to update
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateCreditNote(xeroTenantId, creditNoteID, creditNotes, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateCreditNote.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling updateCreditNote.');
            }
            // verify required parameter 'creditNotes' is not null or undefined
            if (creditNotes === null || creditNotes === undefined) {
                throw new Error('Required parameter creditNotes was null or undefined when calling updateCreditNote.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(creditNotes, "CreditNotes")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "CreditNotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates attachments on a specific credit note by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNoteID Unique identifier for a Credit Note
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes/{CreditNoteID}/Attachments/{FileName}'
                .replace('{' + 'CreditNoteID' + '}', encodeURIComponent(String(creditNoteID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'creditNoteID' is not null or undefined
            if (creditNoteID === null || creditNoteID === undefined) {
                throw new Error('Required parameter creditNoteID was null or undefined when calling updateCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateCreditNoteAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateCreditNoteAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific expense claims
     * @param xeroTenantId Xero identifier for Tenant
     * @param expenseClaimID Unique identifier for a ExpenseClaim
     * @param expenseClaims
     */
    updateExpenseClaim(xeroTenantId, expenseClaimID, expenseClaims, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ExpenseClaims/{ExpenseClaimID}'
                .replace('{' + 'ExpenseClaimID' + '}', encodeURIComponent(String(expenseClaimID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateExpenseClaim.');
            }
            // verify required parameter 'expenseClaimID' is not null or undefined
            if (expenseClaimID === null || expenseClaimID === undefined) {
                throw new Error('Required parameter expenseClaimID was null or undefined when calling updateExpenseClaim.');
            }
            // verify required parameter 'expenseClaims' is not null or undefined
            if (expenseClaims === null || expenseClaims === undefined) {
                throw new Error('Required parameter expenseClaims was null or undefined when calling updateExpenseClaim.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(expenseClaims, "ExpenseClaims")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ExpenseClaims");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific sales invoices or purchase bills
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     * @param invoices
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateInvoice(xeroTenantId, invoiceID, invoices, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateInvoice.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling updateInvoice.');
            }
            // verify required parameter 'invoices' is not null or undefined
            if (invoices === null || invoices === undefined) {
                throw new Error('Required parameter invoices was null or undefined when calling updateInvoice.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(invoices, "Invoices")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Invoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates an attachment from a specific invoices or purchase bill by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoiceID Unique identifier for an Invoice
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices/{InvoiceID}/Attachments/{FileName}'
                .replace('{' + 'InvoiceID' + '}', encodeURIComponent(String(invoiceID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'invoiceID' is not null or undefined
            if (invoiceID === null || invoiceID === undefined) {
                throw new Error('Required parameter invoiceID was null or undefined when calling updateInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateInvoiceAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific item
     * @param xeroTenantId Xero identifier for Tenant
     * @param itemID Unique identifier for an Item
     * @param items
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateItem(xeroTenantId, itemID, items, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Items/{ItemID}'
                .replace('{' + 'ItemID' + '}', encodeURIComponent(String(itemID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateItem.');
            }
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new Error('Required parameter itemID was null or undefined when calling updateItem.');
            }
            // verify required parameter 'items' is not null or undefined
            if (items === null || items === undefined) {
                throw new Error('Required parameter items was null or undefined when calling updateItem.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(items, "Items")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Items");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific linked transactions (billable expenses)
     * @param xeroTenantId Xero identifier for Tenant
     * @param linkedTransactionID Unique identifier for a LinkedTransaction
     * @param linkedTransactions
     */
    updateLinkedTransaction(xeroTenantId, linkedTransactionID, linkedTransactions, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LinkedTransactions/{LinkedTransactionID}'
                .replace('{' + 'LinkedTransactionID' + '}', encodeURIComponent(String(linkedTransactionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateLinkedTransaction.');
            }
            // verify required parameter 'linkedTransactionID' is not null or undefined
            if (linkedTransactionID === null || linkedTransactionID === undefined) {
                throw new Error('Required parameter linkedTransactionID was null or undefined when calling updateLinkedTransaction.');
            }
            // verify required parameter 'linkedTransactions' is not null or undefined
            if (linkedTransactions === null || linkedTransactions === undefined) {
                throw new Error('Required parameter linkedTransactions was null or undefined when calling updateLinkedTransaction.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(linkedTransactions, "LinkedTransactions")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "LinkedTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific manual journal
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     * @param manualJournals
     */
    updateManualJournal(xeroTenantId, manualJournalID, manualJournals, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateManualJournal.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling updateManualJournal.');
            }
            // verify required parameter 'manualJournals' is not null or undefined
            if (manualJournals === null || manualJournals === undefined) {
                throw new Error('Required parameter manualJournals was null or undefined when calling updateManualJournal.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(manualJournals, "ManualJournals")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ManualJournals");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific attachment from a specific manual journal by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournalID Unique identifier for a ManualJournal
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals/{ManualJournalID}/Attachments/{FileName}'
                .replace('{' + 'ManualJournalID' + '}', encodeURIComponent(String(manualJournalID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'manualJournalID' is not null or undefined
            if (manualJournalID === null || manualJournalID === undefined) {
                throw new Error('Required parameter manualJournalID was null or undefined when calling updateManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateManualJournalAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateManualJournalAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates or creates one or more spent or received money transaction
     * @param xeroTenantId Xero identifier for Tenant
     * @param bankTransactions
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateOrCreateBankTransactions(xeroTenantId, bankTransactions, summarizeErrors, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/BankTransactions';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateBankTransactions.');
            }
            // verify required parameter 'bankTransactions' is not null or undefined
            if (bankTransactions === null || bankTransactions === undefined) {
                throw new Error('Required parameter bankTransactions was null or undefined when calling updateOrCreateBankTransactions.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(bankTransactions, "BankTransactions")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "BankTransactions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates or creates one or more contacts in a Xero organisation
     * @param xeroTenantId Xero identifier for Tenant
     * @param contacts
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    updateOrCreateContacts(xeroTenantId, contacts, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Contacts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateContacts.');
            }
            // verify required parameter 'contacts' is not null or undefined
            if (contacts === null || contacts === undefined) {
                throw new Error('Required parameter contacts was null or undefined when calling updateOrCreateContacts.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(contacts, "Contacts")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Contacts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates or creates one or more credit notes
     * @param xeroTenantId Xero identifier for Tenant
     * @param creditNotes an array of Credit Notes with a single CreditNote object.
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateOrCreateCreditNotes(xeroTenantId, creditNotes, summarizeErrors, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/CreditNotes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateCreditNotes.');
            }
            // verify required parameter 'creditNotes' is not null or undefined
            if (creditNotes === null || creditNotes === undefined) {
                throw new Error('Required parameter creditNotes was null or undefined when calling updateOrCreateCreditNotes.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(creditNotes, "CreditNotes")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "CreditNotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates a single new employees used in Xero payrun
     * @param xeroTenantId Xero identifier for Tenant
     * @param employees Employees with array of Employee object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    updateOrCreateEmployees(xeroTenantId, employees, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Employees';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateEmployees.');
            }
            // verify required parameter 'employees' is not null or undefined
            if (employees === null || employees === undefined) {
                throw new Error('Required parameter employees was null or undefined when calling updateOrCreateEmployees.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(employees, "Employees")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Employees");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates or creates one or more sales invoices or purchase bills
     * @param xeroTenantId Xero identifier for Tenant
     * @param invoices
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateOrCreateInvoices(xeroTenantId, invoices, summarizeErrors, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Invoices';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateInvoices.');
            }
            // verify required parameter 'invoices' is not null or undefined
            if (invoices === null || invoices === undefined) {
                throw new Error('Required parameter invoices was null or undefined when calling updateOrCreateInvoices.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(invoices, "Invoices")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Invoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates or creates one or more items
     * @param xeroTenantId Xero identifier for Tenant
     * @param items
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateOrCreateItems(xeroTenantId, items, summarizeErrors, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Items';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateItems.');
            }
            // verify required parameter 'items' is not null or undefined
            if (items === null || items === undefined) {
                throw new Error('Required parameter items was null or undefined when calling updateOrCreateItems.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(items, "Items")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Items");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates or creates a single manual journal
     * @param xeroTenantId Xero identifier for Tenant
     * @param manualJournals ManualJournals array with ManualJournal object in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    updateOrCreateManualJournals(xeroTenantId, manualJournals, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/ManualJournals';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateManualJournals.');
            }
            // verify required parameter 'manualJournals' is not null or undefined
            if (manualJournals === null || manualJournals === undefined) {
                throw new Error('Required parameter manualJournals was null or undefined when calling updateOrCreateManualJournals.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(manualJournals, "ManualJournals")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "ManualJournals");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates or creates one or more purchase orders
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrders
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    updateOrCreatePurchaseOrders(xeroTenantId, purchaseOrders, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreatePurchaseOrders.');
            }
            // verify required parameter 'purchaseOrders' is not null or undefined
            if (purchaseOrders === null || purchaseOrders === undefined) {
                throw new Error('Required parameter purchaseOrders was null or undefined when calling updateOrCreatePurchaseOrders.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(purchaseOrders, "PurchaseOrders")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PurchaseOrders");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates or creates one or more quotes
     * @param xeroTenantId Xero identifier for Tenant
     * @param quotes
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    updateOrCreateQuotes(xeroTenantId, quotes, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateQuotes.');
            }
            // verify required parameter 'quotes' is not null or undefined
            if (quotes === null || quotes === undefined) {
                throw new Error('Required parameter quotes was null or undefined when calling updateOrCreateQuotes.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(quotes, "Quotes")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Quotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Creates or deletes one or more repeating invoice templates
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoices RepeatingInvoices with an array of repeating invoice objects in body of request
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors
     */
    updateOrCreateRepeatingInvoices(xeroTenantId, repeatingInvoices, summarizeErrors, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateOrCreateRepeatingInvoices.');
            }
            // verify required parameter 'repeatingInvoices' is not null or undefined
            if (repeatingInvoices === null || repeatingInvoices === undefined) {
                throw new Error('Required parameter repeatingInvoices was null or undefined when calling updateOrCreateRepeatingInvoices.');
            }
            if (summarizeErrors !== undefined) {
                localVarQueryParameters['summarizeErrors'] = models_1.ObjectSerializer.serialize(summarizeErrors, "boolean");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(repeatingInvoices, "RepeatingInvoices")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "RepeatingInvoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific purchase order
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     * @param purchaseOrders
     */
    updatePurchaseOrder(xeroTenantId, purchaseOrderID, purchaseOrders, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updatePurchaseOrder.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling updatePurchaseOrder.');
            }
            // verify required parameter 'purchaseOrders' is not null or undefined
            if (purchaseOrders === null || purchaseOrders === undefined) {
                throw new Error('Required parameter purchaseOrders was null or undefined when calling updatePurchaseOrder.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(purchaseOrders, "PurchaseOrders")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "PurchaseOrders");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific attachment for a specific purchase order by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param purchaseOrderID Unique identifier for an Purchase Order
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updatePurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}'
                .replace('{' + 'PurchaseOrderID' + '}', encodeURIComponent(String(purchaseOrderID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updatePurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'purchaseOrderID' is not null or undefined
            if (purchaseOrderID === null || purchaseOrderID === undefined) {
                throw new Error('Required parameter purchaseOrderID was null or undefined when calling updatePurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updatePurchaseOrderAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updatePurchaseOrderAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific quote
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     * @param quotes
     */
    updateQuote(xeroTenantId, quoteID, quotes, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateQuote.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling updateQuote.');
            }
            // verify required parameter 'quotes' is not null or undefined
            if (quotes === null || quotes === undefined) {
                throw new Error('Required parameter quotes was null or undefined when calling updateQuote.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(quotes, "Quotes")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Quotes");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific attachment from a specific quote by filename
     * @param xeroTenantId Xero identifier for Tenant
     * @param quoteID Unique identifier for an Quote
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Quotes/{QuoteID}/Attachments/{FileName}'
                .replace('{' + 'QuoteID' + '}', encodeURIComponent(String(quoteID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateQuoteAttachmentByFileName.');
            }
            // verify required parameter 'quoteID' is not null or undefined
            if (quoteID === null || quoteID === undefined) {
                throw new Error('Required parameter quoteID was null or undefined when calling updateQuoteAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateQuoteAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateQuoteAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific draft expense claim receipts
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     * @param receipts
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     */
    updateReceipt(xeroTenantId, receiptID, receipts, unitdp, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateReceipt.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling updateReceipt.');
            }
            // verify required parameter 'receipts' is not null or undefined
            if (receipts === null || receipts === undefined) {
                throw new Error('Required parameter receipts was null or undefined when calling updateReceipt.');
            }
            if (unitdp !== undefined) {
                localVarQueryParameters['unitdp'] = models_1.ObjectSerializer.serialize(unitdp, "number");
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(receipts, "Receipts")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Receipts");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific attachment on a specific expense claim receipts by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param receiptID Unique identifier for a Receipt
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Receipts/{ReceiptID}/Attachments/{FileName}'
                .replace('{' + 'ReceiptID' + '}', encodeURIComponent(String(receiptID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateReceiptAttachmentByFileName.');
            }
            // verify required parameter 'receiptID' is not null or undefined
            if (receiptID === null || receiptID === undefined) {
                throw new Error('Required parameter receiptID was null or undefined when calling updateReceiptAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateReceiptAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateReceiptAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Deletes a specific repeating invoice template
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param repeatingInvoices
     */
    updateRepeatingInvoice(xeroTenantId, repeatingInvoiceID, repeatingInvoices, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateRepeatingInvoice.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling updateRepeatingInvoice.');
            }
            // verify required parameter 'repeatingInvoices' is not null or undefined
            if (repeatingInvoices === null || repeatingInvoices === undefined) {
                throw new Error('Required parameter repeatingInvoices was null or undefined when calling updateRepeatingInvoice.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(repeatingInvoices, "RepeatingInvoices")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "RepeatingInvoices");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific attachment from a specific repeating invoices by file name
     * @param xeroTenantId Xero identifier for Tenant
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param fileName Name of the attachment
     * @param body Byte array of file in body of request
     */
    updateRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, body, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}'
                .replace('{' + 'RepeatingInvoiceID' + '}', encodeURIComponent(String(repeatingInvoiceID)))
                .replace('{' + 'FileName' + '}', encodeURIComponent(String(fileName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'repeatingInvoiceID' is not null or undefined
            if (repeatingInvoiceID === null || repeatingInvoiceID === undefined) {
                throw new Error('Required parameter repeatingInvoiceID was null or undefined when calling updateRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new Error('Required parameter fileName was null or undefined when calling updateRepeatingInvoiceAttachmentByFileName.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateRepeatingInvoiceAttachmentByFileName.');
            }
            this.binaryHeaders = { 'Accept': 'application/json' };
            Object.assign(localVarHeaderParams, this.binaryHeaders);
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                body: models_1.ObjectSerializer.serialize(body, "string")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
            }).then(() => {
                // Reads file stream as chunks so we can put it in body of request.
                // This collects the whole file into memory, which is why we do it _after_ authentication.
                return new Promise((resolve, reject) => {
                    const fileContents = [];
                    body.on('data', (chunk) => {
                        fileContents.push(chunk);
                    });
                    body.on('end', () => {
                        resolve(fileContents);
                    });
                    body.on('error', (err) => {
                        reject(err);
                    });
                });
            }).then((fileContents) => {
                localVarRequestOptions.body = fileContents;
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            try {
                                body = JSON.parse(body);
                            }
                            catch (err) {
                                console.log('JSON parse body failed');
                            }
                            body = models_1.ObjectSerializer.deserialize(body, "Attachments");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates tax rates
     * @param xeroTenantId Xero identifier for Tenant
     * @param taxRates
     */
    updateTaxRate(xeroTenantId, taxRates, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TaxRates';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateTaxRate.');
            }
            // verify required parameter 'taxRates' is not null or undefined
            if (taxRates === null || taxRates === undefined) {
                throw new Error('Required parameter taxRates was null or undefined when calling updateTaxRate.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(taxRates, "TaxRates")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TaxRates");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific tracking category
     * @param xeroTenantId Xero identifier for Tenant
     * @param trackingCategoryID Unique identifier for a TrackingCategory
     * @param trackingCategory
     */
    updateTrackingCategory(xeroTenantId, trackingCategoryID, trackingCategory, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TrackingCategories/{TrackingCategoryID}'
                .replace('{' + 'TrackingCategoryID' + '}', encodeURIComponent(String(trackingCategoryID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateTrackingCategory.');
            }
            // verify required parameter 'trackingCategoryID' is not null or undefined
            if (trackingCategoryID === null || trackingCategoryID === undefined) {
                throw new Error('Required parameter trackingCategoryID was null or undefined when calling updateTrackingCategory.');
            }
            // verify required parameter 'trackingCategory' is not null or undefined
            if (trackingCategory === null || trackingCategory === undefined) {
                throw new Error('Required parameter trackingCategory was null or undefined when calling updateTrackingCategory.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(trackingCategory, "TrackingCategory")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TrackingCategories");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     *
     * @summary Updates a specific option for a specific tracking category
     * @param xeroTenantId Xero identifier for Tenant
     * @param trackingCategoryID Unique identifier for a TrackingCategory
     * @param trackingOptionID Unique identifier for a Tracking Option
     * @param trackingOption
     */
    updateTrackingOptions(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}'
                .replace('{' + 'TrackingCategoryID' + '}', encodeURIComponent(String(trackingCategoryID)))
                .replace('{' + 'TrackingOptionID' + '}', encodeURIComponent(String(trackingOptionID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateTrackingOptions.');
            }
            // verify required parameter 'trackingCategoryID' is not null or undefined
            if (trackingCategoryID === null || trackingCategoryID === undefined) {
                throw new Error('Required parameter trackingCategoryID was null or undefined when calling updateTrackingOptions.');
            }
            // verify required parameter 'trackingOptionID' is not null or undefined
            if (trackingOptionID === null || trackingOptionID === undefined) {
                throw new Error('Required parameter trackingOptionID was null or undefined when calling updateTrackingOptions.');
            }
            // verify required parameter 'trackingOption' is not null or undefined
            if (trackingOption === null || trackingOption === undefined) {
                throw new Error('Required parameter trackingOption was null or undefined when calling updateTrackingOptions.');
            }
            localVarHeaderParams['xero-tenant-id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(trackingOption, "TrackingOption")
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    localVarRequest(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "TrackingOptions");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject({ response: response, body: body });
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.AccountingApi = AccountingApi;
//# sourceMappingURL=accountingApi.js.map